package security.br.ufal.ic.kernel;

import java.util.ArrayList;
import java.util.List;

import org.hibernate.HibernateError;
import org.hibernate.HibernateException;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;

import security.br.ufal.ic.CVEInformation.CVEData;
import security.br.ufal.ic.CVEInformation.KernelCVEData;
import security.br.ufal.ic.gnome.GnomeClassify;

public class ProjectDataControllerKernel {

	final ThreadLocal<Session> threadLocal = new ThreadLocal<Session>();
	@SuppressWarnings("deprecation")
	final SessionFactory sessionFactory = new Configuration().configure().buildSessionFactory();
	Session session = threadLocal.get();

	public void addInstace(CVEData data) {

		session = sessionFactory.openSession();

		try {
			session.beginTransaction();
			session.save(data);
			session.getTransaction().commit();
			session.close();
		} catch (HibernateException e) {
			e.printStackTrace();
			session.getTransaction().rollback();

		}

	}

	public void addInstaceKernelHistory(KernelClassify kernelClassify) {

		session = sessionFactory.openSession();

		try {
			session.beginTransaction();
			session.save(kernelClassify);
			session.getTransaction().commit();
			session.close();
		} catch (HibernateException e) {
			e.printStackTrace();
			session.getTransaction().rollback();

		}

	}
	
	
	public void addInstaceKernelSetLinesChange(KernelSetLineChanges kernelSetLineChanges ) {

		session = sessionFactory.openSession();

		try {
			session.beginTransaction();
			session.save(kernelSetLineChanges);
			session.getTransaction().commit();
			session.close();
		} catch (HibernateException e) {
			e.printStackTrace();
			session.getTransaction().rollback();

		}

	}

	
	public void updateKernelClassify(KernelClassify kernelClassify) {

		session = sessionFactory.openSession();

		try {
			session.beginTransaction();
			session.update(kernelClassify);
			session.getTransaction().commit();
			session.close();
		} catch (HibernateException e) {
			e.printStackTrace();
			session.getTransaction().rollback();

		}

	}
	
	
	
	
	public void addInstaceKernelData(KernelData data) {

		session = sessionFactory.openSession();

		try {
			session.beginTransaction();
			session.save(data);
			session.getTransaction().commit();
			session.close();
		} catch (HibernateException e) {
			e.printStackTrace();
			session.getTransaction().rollback();

		}

	}

	public void addInstaceKernelClassifyNewApproach(KernelClassifyNewApproach data) {

		session = sessionFactory.openSession();

		try {
			session.beginTransaction();
			session.save(data);
			session.getTransaction().commit();
			session.close();
		} catch (HibernateException e) {
			e.printStackTrace();
			session.getTransaction().rollback();

		}

	}

	public void addInstaceKernelData(KernelDataNewApproach data) {

		session = sessionFactory.openSession();

		try {
			session.beginTransaction();
			session.save(data);
			session.getTransaction().commit();
			session.close();
		} catch (HibernateException e) {
			e.printStackTrace();
			session.getTransaction().rollback();

		}

	}

	public List<CVEData> getListCVEKernel() {
		session = sessionFactory.openSession();
		List<CVEData> list = null;

		try {
			session.beginTransaction();
			list = session.createCriteria(KernelCVEData.class).list();

			session.close();
		} catch (HibernateException e) {
			e.printStackTrace();
			session.getTransaction().rollback();

		}

		return list;

	}

	public List<KernelSetLineChanges> getListSetLinesChanged() {
		session = sessionFactory.openSession();
		List<KernelSetLineChanges> list = null;

		try {
			session.beginTransaction();
			list = session.createCriteria(KernelSetLineChanges.class).list();

			session.close();
		} catch (HibernateException e) {
			e.printStackTrace();
			session.getTransaction().rollback();

		}

		return list;

	}

	public List<KernelData> getListKenelData() {
		session = sessionFactory.openSession();
		List<KernelData> list = null;

		try {
			session.beginTransaction();
			list = session.createCriteria(KernelData.class).list();

			session.close();
		} catch (HibernateException e) {
			e.printStackTrace();
			session.getTransaction().rollback();

		}

		return list;

	}
	
	public List<KernelDataNewApproach> getListKenelDatanewApproach() {
		session = sessionFactory.openSession();
		List<KernelDataNewApproach> list = null;

		try {
			session.beginTransaction();
			list = session.createCriteria(KernelDataNewApproach.class).list();

			session.close();
		} catch (HibernateException e) {
			e.printStackTrace();
			session.getTransaction().rollback();

		}

		return list;

	}

	public List<KernelClassify> getListKenelClassify() {
		session = sessionFactory.openSession();
		List<KernelClassify> list = null;

		try {
			session.beginTransaction();
			list = session.createCriteria(KernelClassify.class).list();

			session.close();
		} catch (HibernateException e) {
			e.printStackTrace();
			session.getTransaction().rollback();

		}

		return list;

	}

}
