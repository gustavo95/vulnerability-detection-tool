package security.br.ufal.ic.mozilla;

import java.util.ArrayList;
import java.util.List;

import org.hibernate.HibernateError;
import org.hibernate.HibernateException;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;

import security.br.ufal.ic.CVEInformation.CVEData;
import security.br.ufal.ic.CVEInformation.KernelCVEData;
import security.br.ufal.ic.kernel.KernelClassify;
import security.br.ufal.ic.xen.XenClassify;

public class ProjectDataControllerMozilla {

	final ThreadLocal<Session> threadLocal = new ThreadLocal<Session>();
	@SuppressWarnings("deprecation")
	final SessionFactory sessionFactory = new Configuration().configure().buildSessionFactory();
	Session session = threadLocal.get();

	public void updatePatchMozilla(PatchMozilla patcher) {

		session = sessionFactory.openSession();

		try {
			session.beginTransaction();
			session.update(patcher);
			session.getTransaction().commit();
			session.close();
		} catch (HibernateException e) {
			e.printStackTrace();
			session.getTransaction().rollback();

		}

	}
	
	public void addInstace(MozillaFunction mozillafunction) {
		

		session = sessionFactory.openSession();
		
		
		try {
			session.beginTransaction();
			session.save(mozillafunction);
			session.getTransaction().commit();
			session.close();
		} catch (HibernateException e) {
			e.printStackTrace();
			session.getTransaction().rollback();

		}

	}

public void addInstace(MozillaClassify mozillaClassify) {
		

		session = sessionFactory.openSession();
		
		
		try {
			session.beginTransaction();
			session.save(mozillaClassify);
			session.getTransaction().commit();
			session.close();
		} catch (HibernateException e) {
			e.printStackTrace();
			session.getTransaction().rollback();

		}

	}
	
	public List<PatchMozilla> getListPatchMozilla() {
		session = sessionFactory.openSession();
		List<PatchMozilla> list = null;

		try {
			session.beginTransaction();
			list = session.createCriteria(PatchMozilla.class).list();

			session.close();
		} catch (HibernateException e) {
			e.printStackTrace();
			session.getTransaction().rollback();

		}

		return list;

		
	}
	public List<Vulnerabilities> getListVulnerabilitiesMozilla() {
		session = sessionFactory.openSession();
		List<Vulnerabilities> list = null;

		try {
			session.beginTransaction();
			list = session.createCriteria(Vulnerabilities.class).list();

			session.close();
		} catch (HibernateException e) {
			e.printStackTrace();
			session.getTransaction().rollback();

		}

		return list;
	}
	
	public List<MozillaFunction> getListMozillaFunction() {
		session = sessionFactory.openSession();
		List<MozillaFunction> list = null;

		try {
			session.beginTransaction();
			list = session.createCriteria(MozillaFunction.class).list();

			session.close();
		} catch (HibernateException e) {
			e.printStackTrace();
			session.getTransaction().rollback();

		}

		return list;
	}
	
	public void updateMozillaClassify(MozillaClassify mozillaClassify) {

		session = sessionFactory.openSession();

		try {
			session.beginTransaction();
			session.update(mozillaClassify);
			session.getTransaction().commit();
			session.close();
		} catch (HibernateException e) {
			e.printStackTrace();
			session.getTransaction().rollback();

		}

	}
	
	public List<MozillaClassify> getListMozillaClassify() {
		session = sessionFactory.openSession();
		List<MozillaClassify> list = null;

		try {
			session.beginTransaction();
			list = session.createCriteria(MozillaClassify.class).list();
			session.close();
		} catch (HibernateException e) {
			e.printStackTrace();
			session.getTransaction().rollback();

		}

		return list;
	}
}
