package security.br.ufal.ic.util;

import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class Utills2 {
	
	public static String execueCommand(String comando) {

		Process process = null;
		try {
			process = Runtime.getRuntime().exec(comando);
		} catch (IOException e) {
			e.printStackTrace();
		}

		InputStream inputStream = process.getInputStream();

		String saida = "";

		{
			int n;

			try {
				while ((n = inputStream.read()) != -1) {
					saida += (char) n;
				}
			} catch (IOException e) {
				e.printStackTrace();
			}
		}

		return saida + "\n";
	}

	private static Set<String> getIntervalLinesChangedMinus(String diff,
			String commit) {
		commit = commit + "^";
		Set<String> intervalLines = new LinkedHashSet<>();
		String[] gitdiff = diff.split("\n");
		int intLine = 0;
		int endline = 0;
		for (String line : gitdiff) {
			endline++;
			if (commit.contains("^")) {
				if (line.startsWith("+"))
					endline--;
			} else {
				if (line.startsWith("-"))
					endline--;
			}
			if (line.matches("@@.*@@.*|diff --git.*")) {
				if (line.contains("@@")) {
					if (intLine != 0)
						intervalLines.add((intLine + 3) + "-" + (endline - 4));
					if (commit.contains("^")) {
						line = line.replaceAll("@@", "").replaceAll(" ", "")
								.split("[+]")[0].split(",")[0].split("[-]")[1];
						intLine = Integer.parseInt(line);
						endline = intLine;
					} else {
						line = line.replaceAll("@@", "").replaceAll(" ", "")
								.split("[+]")[1];
						line = line.split(",")[0];
						intLine = Integer.parseInt(line);
						endline = intLine;
					}
				} else if (line.contains("diff --git")) {
					if (intLine != 0)
						intervalLines.add((intLine + 3) + "-" + (endline - 4));
					endline = 0;
				}
			}
		}
		if (intLine != 0)
			intervalLines.add((intLine + 3) + "-" + (endline - 4));// +3 and -4
																	// for
																	// interval

		return intervalLines;
	}

	private static Set<String> getIntervalLinesChangedAdd(String diff,
			String commit) {
		Set<String> intervalLines = new LinkedHashSet<>();
		String[] gitdiff = diff.split("\n");
		int intLine = 0;
		int endline = 0;
		for (String line : gitdiff) {
			endline++;
			if (commit.contains("^")) {
				if (line.startsWith("+"))
					endline--;
			} else {
				if (line.startsWith("-"))
					endline--;
			}
			if (line.matches("@@.*@@.*|diff --git.*")) {
				if (line.contains("@@")) {
					if (intLine != 0)
						intervalLines.add((intLine + 3) + "-" + (endline - 4));
					if (commit.contains("^")) {
						line = line.replaceAll("@@", "").replaceAll(" ", "")
								.split("[+]")[0].split(",")[0].split("[-]")[1];
						intLine = Integer.parseInt(line);
						endline = intLine;
					} else {
						line = line.replaceAll("@@", "").replaceAll(" ", "")
								.split("[+]")[1];
						line = line.split(",")[0];
						intLine = Integer.parseInt(line);
						endline = intLine;
					}
				} else if (line.contains("diff --git")) {
					if (intLine != 0)
						intervalLines.add((intLine + 3) + "-" + (endline - 4));
					endline = 0;
				}
			}
		}
		if (intLine != 0)
			intervalLines.add((intLine + 3) + "-" + (endline - 4));// +3 and -4
																	// for
																	// interval

		return intervalLines;
	}

	public static ArrayList<Set<String>> getSetLineNumer(String commit,
			String file) {

		List<String> changesRemoved = new ArrayList<String>();
		List<String> changesadd = new ArrayList<String>();
		Set<String> changesRemovedLine = new LinkedHashSet<String>();
		Set<String> changesaddLine = new LinkedHashSet<String>();
		Pattern pattern = Pattern.compile("^(\\-|\\+)(.*)");
		// Pattern pattern2 = Pattern.compile("^(\\-)(.*)");
		// Pattern pattern3 = Pattern.compile("^(\\-)(.*)");
		int menor;
		int maior;
		int temps;

		ArrayList<Set<String>> temp = new ArrayList<Set<String>>();

		String diff = Utils.execueCommand("git show " + commit + " -- " + file);
		ArrayList<String> listIntervals = new ArrayList<String>();

		for (String s : Utils.getIntervalLinesChangedAdd(diff, commit)) {
			listIntervals.add(s);
		}

		for (int i = 0; i < listIntervals.size(); i++) {
			// System.out.println(listIntervals.get(i));
			String[] aux = listIntervals.get(i).split("-");
			menor = Integer.parseInt(aux[0]);
			maior = Integer.parseInt(aux[1]);

			if (listIntervals.get(i).split("-")[0].equals(listIntervals.get(i)
					.split("-")[1])) {
				changesaddLine.add(listIntervals.get(i).split("-")[0]);
				changesRemovedLine.add(listIntervals.get(i).split("-")[0]);
			} else {

				boolean haveMore = false;
				boolean haveMenus = false;

				String s2 = diff.split("@@ -.*?\\,[\\d]+ @.*")[i + 1];
				System.out.println(s2);

				for (String stringfinder : s2.split("\n")) {
					if (stringfinder.startsWith("+")) {
						haveMore = true;
						Matcher matcher = pattern.matcher(stringfinder);
						matcher.find();
						if (!(matcher.group(2).length() <= 3)) {
							changesadd.add(matcher.group(2));
						}
					} else if (stringfinder.startsWith("-")) {
						haveMenus = true;
						Matcher matcher = pattern.matcher(stringfinder);
						matcher.find();
						if (!(matcher.group(2).length() <= 3)) {
							changesRemoved.add(matcher.group(2));
						}
					}
				}

				for (Iterator<String> iterator = changesadd.iterator(); iterator
						.hasNext();) {
					String value = iterator.next();
					if (value.replace("\t", "").replace(" ", "").length() <= 3) {
						iterator.remove();
					}
				}

				for (Iterator<String> iterator = changesRemoved.iterator(); iterator
						.hasNext();) {
					String value = iterator.next();

					if (value.replace("\t", "").replace(" ", "").length() <= 3) {
						iterator.remove();
					}
				}
				if (haveMore == true) {
					String[] setFileToAddvedAnalysis = Utils.execueCommand(
							"git show " + commit + ":" + file).split("\n");
					for (String auxiliar : changesadd) {
						for (int inter = menor; inter < setFileToAddvedAnalysis.length; inter++) {
							if (setFileToAddvedAnalysis[inter]
									.equals((auxiliar)) && inter <= maior) {
								changesaddLine.add(String.valueOf(inter + 1));
							}
						}

					}
				}
				if (haveMenus == true) {
					String[] setFileToRemovedAnalysis = Utils.execueCommand(
							"git show " + commit + "^:" + file).split("\n");
					for (String auxiliar : changesRemoved) {
						for (int inter = menor; inter <= maior; inter++) {
							if (setFileToRemovedAnalysis[inter]
									.equals((auxiliar))) {
								changesRemovedLine.add(String
										.valueOf(inter + 1));
							}
						}

					}
				}

			}
			for (Iterator<String> iterator = changesRemoved.iterator(); iterator
					.hasNext();) {
				String value = iterator.next();
				System.out.println(value);

				if (value.replace("\t", "").replace(" ", "").length() <= 3) {
					iterator.remove();
				}

			}

			temp.add(changesaddLine);
			temp.add(changesRemovedLine);

		}
		return temp;

	}

	public static void main(String[] args) {

		System.out.println(Utils.getIntervalLinesChangedAdd(Utils.execueCommand("git show 701a90bad99b8081a824cca52c178c8fc8f46bb2"+" -- "+"security/selinux/ss/services.c"),"701a90bad99b8081a824cca52c178c8fc8f46bb2"));
		System.out.println(Utils.getIntervalLinesChangedMinus(Utils.execueCommand("git show 701a90bad99b8081a824cca52c178c8fc8f46bb2"+" -- "+"security/selinux/ss/services.c"),"701a90bad99b8081a824cca52c178c8fc8f46bb2"));


		
	}

}
