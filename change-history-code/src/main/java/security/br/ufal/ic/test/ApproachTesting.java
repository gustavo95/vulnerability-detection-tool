package security.br.ufal.ic.test;

import org.hibernate.type.MaterializedNClobType;

import security.br.ufal.ic.classification.ClassificationDataStatitics;
import security.br.ufal.ic.classification.ODCClassifiers;

public class ApproachTesting {

	
	
	public static void main(String[] args) {
		ODCClassifiers odc= new ODCClassifiers();
		String text = "#undef ELF_CORE_COPY_REGS"
				+"#define ELF_CORE_COPY_REGS(_dest,_regs) elf32_core_copy_regs(_dest,_regs);\n"
		 
		+"-void elf32_core_copy_regs(elf_gregset_t _dest, struct pt_regs *_regs)\n" //Function Extraneous
		+"+void elf32_core_copy_regs(elf_gregset_t grp, struct pt_regs *regs)\n"//Function Missing
		 	+"int i;\n"
		+"-	memset(_dest, 0, sizeof(elf_gregset_t));\n"//Function Call Extraneous
		
		+"-	/* XXXKW the 6 is from EF_REG0 in gdb/gdb/mips-linux-tdep.c, include/asm-mips/reg.h */\n"//Comment
		+"-	for(i=6; i<38; i++)\n"
		+"-		_dest[i] = (elf_greg_t) _regs->regs[i-6];\n"//Variable Extraneous
		+"-	_dest[i++] = (elf_greg_t) _regs->lo;\n"//Variable Extraneous
		+"-	_dest[i++] = (elf_greg_t) _regs->hi;\n"//Variable Extraneous
		+"-	_dest[i++] = (elf_greg_t) _regs->cp0_epc;\n"//Variable Extraneous
		+"-	_dest[i++] = (elf_greg_t) _regs->cp0_badvaddr;\n"//Variable Extraneous
		+"-	_dest[i++] = (elf_greg_t) _regs->cp0_status;\n"//Variable Extraneous
		+"-	_dest[i++] = (elf_greg_t) _regs->cp0_cause;\n"//Variable Extraneous
		+"+	for (i = 0; i < EF_R0; i++)\n"
		+"+		grp[i] = 0;\n" //Variable Missing
		+"+	grp[EF_R0] = 0;\n" //Variable Missing
		+"+	for (i = 1; i <= 31; i++)\n"
		+"+		grp[EF_R0 + i] = (elf_greg_t) regs->regs[i]\n" //Variable Missing
		+"+	grp[EF_R26] = 0\n" //Variable Missing
		+"-	grp[EF_R27] = 0;\n" //Variable Extraneous
		+"+	grp[EF_LO] = (elf_greg_t) regs->lo;\n"//Variable Missing
		+"+	grp[EF_HI] = (elf_greg_t) regs->hi;\n"//Variable Missing
		+"+	grp[EF_CP0_EPC] = (elf_greg_t) regs->cp0_epc;\n"//Variable Missing
		+"+	grp[EF_CP0_BADVADDR] = (elf_greg_t) regs->cp0_badvaddr\n"//Variable Missing
		+"+	grp[EF_CP0_STATUS] = (elf_greg_t) regs->cp0_status;\n"//Variable Missing
		+"+	grp[EF_CP0_CAUSE] = (elf_greg_t) regs->cp0_cause;\n"//Variable Missing
		+"+#ifdef EF_UNUSED0\n"
		+"+	grp[EF_UNUSED0] = 0;\n"//Variable Missing
		+"+#endif\n"
		+" MODULE_DESCRIPTION(Binary format loader for compatibility with o32 Linux/MIPS binaries)\n"
		+"-	if (CPUCLOCK_WHICH(which_clock) == CPUCLOCK_SCHED) {\n"//Conditional Extraneous
		+"-		tp->tv_sec = div_long_long_rem(cpu.sched\n"//Variable Extraneous
		+"-					       NSEC_PER_SEC, &tp->tv_nsec);\n"
		+"-	} else {\n"//Conditional Extraneous
		+"+	if (CPUCLOCK_WHICH(which_clock) == CPUCLOCK_SCHED)\n"
		+"+		*tp = ns_to_timespec(cpu.sched);\n"
		+"+	else\n"//Conditional Missing
		+"		cputime_to_timespec(cpu.cpu, tp);\n"
		+"-	}\n"
		+"- static int check_clock(const clockid_t which_clock)1\n"//Function Extraneous
		+"+ static int check_clock::const clockid_t (which_clock);\n"//Function Extraneous
		+"-		struct cpu_timer_list *t = list_first_entry(timers,\n"//Variable Extraneous
		+"+		struct cpu_timer_list *tl = list_first_entry(timers,\n"//Variable Missing
		+"+		list_move_tail(&tl->entry, firing)\n"//Function Call Missing
		+"+			if (p && !thread_group_leader(p))"//Conditional Missing
		+"-			if (p && p->tgid != pid)";//Conditional Extraneous
//
 
		
		ClassificationDataStatitics data = new ClassificationDataStatitics("", text, "123456", "function");
		
		System.out.println(data.getNVariableExtraneousChanges() + "   VariableExtraneousChanges");
		System.out.println(data.getNVariableMissingChanges()+"   VariableMissingChanges");
		System.out.println(data.getNFunctionCallExtraneousChanges()+"   FunctionCallExtraneousChanges ");
		System.out.println(data.getNFunctionCallMissingChanges()+"   FunctionCallMissingChanges");
		System.out.println(data.getNConditionalExtraneousChanges()+"   ConditionalExtraneousChanges");
		System.out.println(data.getNConditionalMissingChanges()+"   ConditionalMissingChanges");
		System.out.println(data.getNMethodExtraneousChanges()+"   MethodExtraneousChanges");
		System.out.println(data.getNMethodMissingChanges()+"   MethodMissingChanges");



	}
	
}
