package security.br.ufal.ic.moodle;

import java.io.BufferedReader;
//moodle
import java.io.BufferedReader;
import java.io.IOException;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.ArrayList;
import java.util.List;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.regex.Pattern;

import org.jsoup.Connection;
import org.jsoup.Connection;
import org.jsoup.Jsoup;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;
import org.jsoup.select.Elements;

//moodle
public class ColetarFluxo {
	
	
	public List<VulnerabilitiesMoodle> getVulnerabilidadesLinks() throws Exception{
		List<VulnerabilitiesMoodle> vulnerabilitiesLinks = new ArrayList<>();

		for(int i = 1; i <= 6; i++){
			Connection connection = Jsoup.connect("http://www.cvedetails.com/vulnerability-list.php?vendor_id=2105&product_id=3590&version_id=&page=" + i + "&hasexp=0&opdos=0&opec=0&opov=0&opcsrf=0&opgpriv=0&opsqli=0&opxss=0&opdirt=0&opmemc=0&ophttprs=0&opbyp=0&opfileinc=0&opginf=0&cvssscoremin=0&cvssscoremax=0&year=0&month=0&cweid=0&order=1&trc=281&sha=9ddd526d6c3de20c88ac1e41f0bc477f1393cc17").timeout(10*1000);
			Document doc = connection.get();
			Pattern pattern = Pattern.compile("(http.*cvedetails.*CVE-[0-9]*-[0-9]*)");
			Elements links = doc.select("a[href]");
			for(Element l: links){
				String link = l.attr("abs:href");
				Matcher matcher = pattern.matcher(link);
				if(matcher.find()) {
					String result = matcher.group();
					vulnerabilitiesLinks.add(new VulnerabilitiesMoodle(result));
	
				}
			}
		}

		return vulnerabilitiesLinks;
	}

	public List<BugsMoodle> getBugsLinks(String url) throws IOException{
		List<BugsMoodle> bugsLinks = new ArrayList<>();

		Connection connection = Jsoup.connect(url).timeout(10*1000);
		Document doc = connection.get();
		Pattern pattern = Pattern.compile("(http.*git\\.moodle.*commit.*)");
		Elements links = doc.select("a[href]");

		for(Element l: links){
			String link = l.attr("abs:href");
			Matcher matcher = pattern.matcher(link);
			if(matcher.find()) {
				String result = matcher.group();
				bugsLinks.add(new BugsMoodle(result));
			}
		}

		return bugsLinks;
	}

	public ArrayList<String> getPatchLink(String url) throws IOException{
		ArrayList<String> bugsLinks = new ArrayList<String>();

		Connection connection = Jsoup.connect(url).timeout(10*1000);
		Document doc = connection.get();

		Pattern pattern = Pattern.compile("(http.*git\\.moodle.*commitdiff.*)");
		Pattern pattern2 = Pattern.compile("(http.*moodle.*commitdiff.*h=HEAD)|(http.*moodle.*commitdiff.*hp=.*)");

		Elements links = doc.select("a[href]");

		for(Element l: links){
			String link = l.attr("abs:href");

			Matcher matcher = pattern.matcher(link);
			Matcher matcher2 = pattern2.matcher(link);
			if(matcher.find()) {
				if(matcher2.find()){

				}else{
					String result = matcher.group();

					if(checarLista(bugsLinks, result)){
						bugsLinks.add(result);
						//System.out.println("Patch links: " + result);
					}
				}
			}
		}

		return bugsLinks;
	}

	public boolean checarLista(ArrayList<String> al, String s){
		boolean b = true;

		for(int i = 0; i < al.size(); i++){
			if(al.get(i).equals(s)){
				b = false;
			}
		}

		return b;
	}

	public String getPatchDiff(String url) throws IOException{
		String patchDiff = "nada";
		Connection connection = Jsoup.connect(url).timeout(10*1000);
		Document doc = connection.get();
		Elements result = doc.getAllElements();
		patchDiff = result.get(0).getAllElements().get(0).text();
		return patchDiff;
	}

	public FileMoodle getFile(String url) throws IOException{
		String file = "";
		Connection connection = Jsoup.connect(url).timeout(10*1000);
		Document doc = connection.get();
		Elements cves = doc.getElementsByClass("patch");
		for (int i = 0; i < cves.size(); i++) {     	
			file = (cves.get(i).getAllElements().get(0).text().replace("&nbsp;", " "));
			
		}
		return new FileMoodle(file);
	}

	public List<FunctionMoodle> getFunction(String url) throws IOException{
		List<FunctionMoodle> functions = new ArrayList<>();
		String function = "";
		Connection connection = Jsoup.connect(url).timeout(10*1000);
		Document doc = connection.get();
		Elements ele = doc.getElementsByClass("section");
		for (int i = 0; i < ele.size(); i++) {
			function = ele.get(i).getAllElements().get(0).text().replace("&nbsp;", " ");
			if(!function.equals("")){
				functions.add(new FunctionMoodle(function));
			}
		}
		return functions;
	}
	
	public synchronized static String execCommand(final String commandLine) throws IOException {  

		boolean success = false;  
		String result;  
		Process p;  
		BufferedReader input;  
		StringBuffer cmdOut = new StringBuffer();  
		String lineOut = null;  
		int numberOfOutline = 0;  
		try {  

			p = Runtime.getRuntime().exec(commandLine);  
			input = new BufferedReader(new InputStreamReader(p.getInputStream()));  
			while ((lineOut = input.readLine()) != null) {  
				if (numberOfOutline > 0) {  
					cmdOut.append("\n");  
				}  
				cmdOut.append(lineOut);  
				numberOfOutline++;  
			}  

			result = cmdOut.toString();  
			success = true;  
			input.close();  

		} catch (IOException e) { 
			result = String.format("Falha ao executar comando %s. Erro: %s", commandLine, e.toString());  
		} 

		// Se n�o executou com sucesso, lan�a a falha  
		if (!success) {  
			throw new IOException(result);  
		}  

		return result;  

	} 
	
}