package security.br.ufal.ic.mozillaOLD;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;

public class CreateDB {

	public static void main(String[] args) throws IOException {

		BufferedReader br_filerevisions = new BufferedReader(
				new FileReader(
						"/Users/marcuspianco/Documents/workspace/PredictVulnerabilities-ChangeHistory/src/main/java/data/ufal-sec-ok-but-not-ready.csv"));
		String lineRevisions = br_filerevisions.readLine();

		DataReportDAOController datareport = new DataReportDAOController();

		String AttachListMethod = "";
		String filelistMethod = "";
		String AttachRevision = "";
		String filelistRevision = "";
		String method = "";
		String revision = "";
		String mfsa="";
		String idBug="";
		Pattern patternRevision = Pattern.compile("\\-r(\\S+)");
		
		
		while (lineRevisions != null) {
			String fileAnterior="";

			BufferedReader br_fileMethods = new BufferedReader(
					new FileReader(
							"/Users/marcuspianco/Documents/workspace/PredictVulnerabilities-ChangeHistory/src/main/java/data/listmethods.csv"));
			String line = br_fileMethods.readLine();

			Matcher matcher = patternRevision.matcher(lineRevisions);
			matcher.find();
			revision = matcher.group(0);

			AttachRevision = lineRevisions.split("\\t")[1].replace(" ", "");
			// System.out.println(AttachRevision + "" + "revision");
			filelistRevision = lineRevisions.split("\\t")[2];
			idBug=lineRevisions.split("\\t")[3];
			mfsa=lineRevisions.split("\\t")[4];
			
			
			

			while (line != null) {

				AttachListMethod = line.split(", ")[2].substring(0, 6).replace(
						" ", "");
				filelistMethod = line.split(", ")[3].replace(" ", "");

				method = line.split(", ")[4].replace(" ", "");

				// System.out.println(AttachListMethod + "" + "Method");

				if (AttachListMethod.equals(AttachRevision) && filelistMethod.equals(filelistRevision)) {
					// System.out.println(AttachListMethod + "   "+
					// AttachRevision);
					

					if (method.contains("::")) {
						

						DataReport data = new DataReport();
						data.setAttach(AttachListMethod);
						data.setFile(filelistMethod);
						data.setMethod(method);
						data.setRevision(revision);
						data.setIdBug(idBug);
						data.setMfsa(mfsa);
						
						if(!(fileAnterior.equals(filelistRevision))){
//						data.setRevisions(DiffRevision.getListRevision(filelistRevision).size());
						fileAnterior=filelistRevision;
						}else{
							data.setRevisions(0);
						}
						datareport.addInstace(data);
						
						
						

						// System.out.println(revision + " " + filelistRevision
						// + " "
						// + AttachListMethod + " " + method);
					}
				}
				line = br_fileMethods.readLine();

			}
			br_fileMethods.close();
			lineRevisions = br_filerevisions.readLine();

		}

		br_filerevisions.close();

	}

}
