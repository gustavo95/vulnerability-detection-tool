package security.br.ufal.ic.test;

import static org.junit.Assert.assertEquals;

import org.junit.Test;

import security.br.ufal.ic.classification.ODCClassifiers;

public class ClassificaTionTest {

	// TODO: NA: Verify this

	@Test
	public void ODCClassificationTestVariable() {

		ODCClassifiers odc = new ODCClassifiers();

		assertEquals("int a=0;", true, odc.searchTokenVariable("int a=0;"));
		assertEquals("if(a == 0);", false, odc.searchTokenVariable("if(a == 0);"));
		assertEquals("for (int a = 0; a < 10; a++)", false, odc.searchTokenVariable("for (int a = 0; a < 10; a++)"));
		assertEquals("float a = 0;", true, odc.searchTokenVariable("int a = 0;"));
		assertEquals("int        a_yyuyus = 0;", true, odc.searchTokenVariable("int        a_yyuyus = 0;"));
		assertEquals("a = 0;", true, odc.searchTokenVariable("a= 0;"));
		assertEquals("int a;", false, odc.searchTokenVariable("int  a;"));
		assertEquals("int[] array={1,2,3,4,5}", true, odc.searchTokenVariable("int[] array={1,2,3,4,5}"));
		assertEquals("std::int[] array={1,2,3,4,5}", true, odc.searchTokenVariable("int[] array={1,2,3,4,5}"));
		assertEquals("int a = 3;", true, odc.searchTokenVariable("int a = 3;"));
		assertEquals("char c3 = 97; // 97 = 'a' on ascii chart", true,
				odc.searchTokenVariable("char c3 = 97; // 97 = 'a' on ascii chart"));
		assertEquals("int foo [5] = { 16, 2, 77, 40, 12071 };", true,
				odc.searchTokenVariable("int foo [5] = { 16, 2, 77, 40, 12071 };"));
		assertEquals("result = a - b;", true, odc.searchTokenVariable("result = a - b;"));
		assertEquals("int result = sum(a, b);", true, odc.searchTokenVariable("int result = sum(a, b);"));
		
		assertEquals("-	value->tv_sec = div_long_long_rem(nsec, NSEC_PER_SEC, &value->tv_usec);",true, odc.searchTokenVariable("-	value->tv_sec = div_long_long_rem(nsec, NSEC_PER_SEC, &value->tv_usec);"));
		assertEquals("		-	value->tv_usec = NSEC_PER_USEC;", true, odc.searchTokenVariable("		-	value->tv_usec = NSEC_PER_USEC;"));
		assertEquals("		+	value->tv_sec = div_long_long_rem(nsec, NSEC_PER_SEC, &rem);", true, odc.searchTokenVariable("		+	value->tv_sec = div_long_long_rem(nsec, NSEC_PER_SEC, &rem);"));
		assertEquals("		+	value->tv_usec = rem / NSEC_PER_USEC;", true, odc.searchTokenVariable("		+	value->tv_usec = rem / NSEC_PER_USEC;"));
		assertEquals("		-	_dest[i++] = (elf_greg_t) _regs->hi;",true, odc.searchTokenVariable("		-	_dest[i++] = (elf_greg_t) _regs->hi;"));
		assertEquals("		+		grp[i] = 0;",true, odc.searchTokenVariable("		+		grp[i] = 0;"));
		assertEquals("		+	for (i = 1; i <= 31; i++)",false, odc.searchTokenVariable("		+	for (i = 1; i <= 31; i++)"));
		assertEquals("		-	_dest[i++] = (elf_greg_t) _regs->cp0_epc;",true, odc.searchTokenVariable("		-	_dest[i++] = (elf_greg_t) _regs->cp0_epc;"));
		assertEquals("		+	grp[EF_CP0_BADVADDR] = (elf_greg_t) regs->cp0_badvaddr;",true, odc.searchTokenVariable("		+	grp[EF_CP0_BADVADDR] = (elf_greg_t) regs->cp0_badvaddr;"));
		

	}

	@Test
	public void ODCClassificationTestConditionalStatment() {

		ODCClassifiers odc = new ODCClassifiers();

		// TODO: NA: nÃ£o consegui pensar em testes para false
		assertEquals("if(3>0);", true, odc.searchTokenConditionalStates("if(3>0);"));
		assertEquals("if        (3>03);", true, odc.searchTokenConditionalStates("if         (3>03);"));
		assertEquals("if(3>0)      ;", true, odc.searchTokenConditionalStates("if(3>0)      ;"));
		assertEquals("if(3>0)     {", true, odc.searchTokenConditionalStates("if(3>0)     {"));
		assertEquals("if          (a == 0)    {", true, odc.searchTokenConditionalStates("if          (a == 0)    {"));
		assertEquals("else if  (a>23)  {}", true, odc.searchTokenConditionalStates("else if  (a>23)  {}"));
		assertEquals("else   if (a>23){}", true, odc.searchTokenConditionalStates("else   if (a>23){}"));
		assertEquals("else  {", true, odc.searchTokenConditionalStates("else  {"));
	}

	@Test
	public void ODCClassificationTestFunctionCall() {

		ODCClassifiers odc = new ODCClassifiers();

		assertEquals("return meanCalculator(int value,njhuuu);", true,
				odc.searchTokenFunctionCall("return meanCalculator(int value,njhuuu);"));
		assertEquals("return meanCalculator();", true, odc.searchTokenFunctionCall("return meanCalculator();"));
		assertEquals("Double a = meanCalculator(int value,njhuuu);", true,
				odc.searchTokenFunctionCall("Double a = meanCalculator(int value,njhuuu);"));
		assertEquals("Double a=meanCalculator(dc,ds); ", true,
				odc.searchTokenFunctionCall("Double a = meanCalculator();"));
		assertEquals(" meanClaculator(fef,eed);", true, odc.searchTokenFunctionCall(" meanCalculator();"));
		assertEquals("if(meanCalculator(x,y)==123){", false,
				odc.searchTokenFunctionCall("if(meanCalculator(x,y)==123){"));
		assertEquals("if (find()==123){", false, odc.searchTokenFunctionCall("if(find()==123) {"));
		assertEquals("int meanCalculator(x,y){}", false, odc.searchTokenFunctionCall("int meanCalculator(x,y){} "));

		assertEquals("int meanCalculator(x,y);", false, odc.searchTokenFunctionCall("int meanCalculator(x,y); "));

	}

	@Test
	public void ODCClassificationTestFunction() {

		ODCClassifiers odc = new ODCClassifiers();
		assertEquals("int meanCalculator(x,y);", true, odc.searchTokenFunction("int meanCalculator(x,y); "));
		assertEquals("return meanCalculator(int value,njhuuu);", false, odc.searchTokenFunction("return meanCalculator(int value,njhuuu);"));
		assertEquals("return meanCalculator();", false, odc.searchTokenFunction("return meanCalculator();"));
		assertEquals("Double a = meanCalculator(int value,njhuuu);", false, odc.searchTokenFunction("Double a = meanCalculator(int value,njhuuu); )      ;"));
		assertEquals("Double a=meanCalculator(); ", false, odc.searchTokenFunction("Double a=meanCalculator(); "));
		assertEquals("meanClaculator();", false, odc.searchTokenFunction("meanCalculator();"));
		assertEquals("int meanCalculator(x,y){}", true, odc.searchTokenFunction("int meanCalculator(x,y){} "));
		assertEquals("static int meanCalculator(x,y){}", true, odc.searchTokenFunction("static int meanCalculator(x,y){} "));
		assertEquals("int meanCalculator(){}", true, odc.searchTokenFunction("int meanCalculator(){} "));
		assertEquals("static int meanCalculator(x,y){}", true, odc.searchTokenFunction("static int meanCalculator(x,y){} "));
		assertEquals("if(meanCalculator(x,y)==123){", false, odc.searchTokenFunction("if(meanCalculator(x,y)==123){"));
		assertEquals("if (find()==123){", false, odc.searchTokenFunction("if(find()==123) {"));
		assertEquals("static int meanCalculator(x,y);", true, odc.searchTokenFunction("static int meanCalculator(x,y);"));
		assertEquals("static int meanCalculator();", true, odc.searchTokenFunction("static int meanCalculator();"));
		assertEquals("int meanCalculator();", true, odc.searchTokenFunction("int meanCalculator();"));
		assertEquals("int meanCalculator(x,y);", true, odc.searchTokenFunction("int meanCalculator(x,y);"));
		assertEquals("void Vetor2D::setX( int did){", true, odc.searchTokenFunction("void Vetor2D::setX( int did){"));

		
		
		
		




		

	}

}
