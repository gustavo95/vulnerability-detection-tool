package security.br.ufal.ic.webcolector;

import java.io.IOException;
import java.security.KeyManagementException;
import java.security.NoSuchAlgorithmException;
import java.security.cert.X509Certificate;
import java.util.HashSet;
import java.util.Set;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.net.ssl.HostnameVerifier;
import javax.net.ssl.HttpsURLConnection;
import javax.net.ssl.SSLContext;
import javax.net.ssl.SSLException;
import javax.net.ssl.SSLSession;
import javax.net.ssl.TrustManager;
import javax.net.ssl.X509TrustManager;

import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;

import security.br.ufal.ic.CVEInformation.CVEData;
import security.br.ufal.ic.gnome.GnomeData;
import security.br.ufal.ic.gnome.ProjectDataControllerGnome;
import security.br.ufal.ic.kernel.KernelData;
import security.br.ufal.ic.kernel.ProjectDataControllerKernel;

public class CVEExtractCommitFileMethod {
	private static void creatingCertificate() {
		TrustManager[] trustAllCerts = new TrustManager[] { new X509TrustManager() {
			public java.security.cert.X509Certificate[] getAcceptedIssuers() {
				return null;
			}

			public void checkClientTrusted(X509Certificate[] certs, String authType) {
			}

			public void checkServerTrusted(X509Certificate[] certs, String authType) {
			}

		} };

		SSLContext sc = null;
		try {
			sc = SSLContext.getInstance("SSL");
			sc.init(null, trustAllCerts, new java.security.SecureRandom());
		} catch (NoSuchAlgorithmException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (KeyManagementException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());

		// Create all-trusting host name verifier
		HostnameVerifier allHostsValid = new HostnameVerifier() {

			public boolean verify(String hostname, SSLSession session) {
				return true;
			}

		};
		// Install the all-trusting host verifier
		HttpsURLConnection.setDefaultHostnameVerifier(allHostsValid);

	}

	// public static void main(String[] args) throws IOException {

	// ProjectDataController dao = new ProjectDataController();
	//
	// Set<String> setCVEKernel = new HashSet<String>();
	//
	// for (CVEData kernelcve : dao.getListCVEKernel()) {
	// setCVEKernel.add(kernelcve.getCVE().replace(" ", ""));
	// }
	//
	// for (String s : setCVEKernel) {
	//
	// Document doc = Jsoup.connect("http://www.cvedetails.com/cve/" +
	// s).timeout(3500).get();
	// Elements elements = doc.getElementsByAttributeValueMatching("href",
	// Pattern.compile("commit;h="));
	// for (Element e : elements) {
	// // System.out.println(e.attr("href"));
	// Document docLink = Jsoup.connect(e.text()).timeout(3500).get();
	// String commit = e.text().split("h=")[1];
	// Elements tableElements = docLink.getElementsByClass("diffstat");
	// Elements tableHeaderEles = tableElements.select("thead tr th");
	// Elements tableRowElements = tableElements.select(":not(thead) tr");
	//
	// for (int i = 0; i < tableRowElements.size(); i++) {
	// Element row = tableRowElements.get(i);
	// Elements rowItems = row.select("td");
	// for (int y = 0; y < rowItems.size(); y++) {
	//
	// if (rowItems.get(y).text().length() > 3 &&
	// !rowItems.get(y).text().contains("-rw-r-")) {
	// // System.out.println(rowItems.get(y).text()+"
	// // "+commit);
	// Document doc2 = Jsoup
	// .connect("http://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/diff/"
	// + rowItems.get(y).text() + "?id=" + commit)
	// .timeout(3500).get();
	// Elements setfunction = doc2.select("div.hunk");
	// Pattern pattern = Pattern.compile("(?<=\\s+@@).*?\\s*@@(.*?\\()");
	//
	// for (int j = 0; j < setfunction.size(); j++) {
	// // System.out.println(teste.get(i));
	// Matcher matcher = pattern.matcher(setfunction.get(j).toString());
	//
	// while (matcher.find()) {
	// if (matcher.group(1).length() > 0) {
	// KernelData kerneldata = new KernelData();
	// kerneldata.setFunction(matcher.group().split("@@")[1]);
	// kerneldata.setFile(rowItems.get(y).text());
	// kerneldata.setCommit(commit);
	// kerneldata.setCVEID(s);
	// dao.addInstaceKernelData(kerneldata);
	//
	// }
	//
	// }
	//
	// }
	//
	// }
	//
	// }
	// }
	// }
	// }
	// }
	//
	// }

	// Pegar com o h --- est√° mais correto
	public static void main(String[] args) throws IOException {

		ProjectDataControllerKernel dao = new ProjectDataControllerKernel();

		Set<String> setCVEKernel = new HashSet<String>();

		for (CVEData kernelcve : dao.getListCVEKernel()) {
			setCVEKernel.add(kernelcve.getCVE().replace(" ", ""));
		}
		int a=0;
		for (String s : setCVEKernel) {
			System.out.println(a++);
			if(a>614){

			Document doc = Jsoup.connect("http://www.cvedetails.com/cve/" + s).timeout(10 * 1000).get();
			Elements elements = doc.getElementsByAttributeValueMatching("href", Pattern.compile("commit;h="));
			for (Element e : elements) {
				Document docLink = Jsoup.connect(e.text()).timeout(10 * 1000).get();
				String commit = e.text().split("h=")[1];
				Elements tableElements = docLink.getElementsByClass("diffstat");
				Elements tableHeaderEles = tableElements.select("thead tr th");
				Elements tableRowElements = tableElements.select(":not(thead) tr");

				for (int i = 0; i < tableRowElements.size(); i++) {
					Element row = tableRowElements.get(i);
					Elements rowItems = row.select("td");
					for (int y = 0; y < rowItems.size(); y++) {

						if (rowItems.get(y).text().length() > 3 && !rowItems.get(y).text().contains("-rw-r-")) {
							
							Document doc2 = Jsoup
									.connect("http://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/diff/"
											+ rowItems.get(y).text() + "?id=" + commit)
									.timeout(10 * 1000).get();
//							System.out.println(doc2.text());
							Elements setfunction = doc2.select("div");
							//Pattern pattern = Pattern.compile("(?<=\\s+@@).*?@@(.*?\\,.*)+");
							Pattern pattern = Pattern.compile("(endif)");

							// (?<=\\s+@@).*?\\s*@@(.*?\\,.*)+
							for (int j = 0; j < setfunction.size(); j++) {
								// System.out.println(teste.get(i));
//								System.out.println(setfunction.toString());
								Matcher matcher = pattern.matcher(setfunction.get(j).toString());
								while (matcher.find()) {
									System.out.println(s);
									if (matcher.group(1).length() > 0) {
										//KernelData kerneldata = new KernelData();
//										System.out.println(matcher.group(1));
										//kerneldata.setFunction(matcher.group().split("@@ ")[1]);
										//kerneldata.setFile(rowItems.get(y).text());
										//kerneldata.setCommit(commit);
										//kerneldata.setCVEID(s);
//										dao.addInstaceKernelData(kerneldata);

									}

								}

							}

						}

					}
				}
			}
		}
	}
	}

}

// Metod para pegar com um padrao de git com o id=commit
// public class TestgitLink {
//

// public static void main(String[] args) throws IOException {
// int a = 0;
//
// Document doc = null;
// ProjectDataControllerGnome dao = new ProjectDataControllerGnome();
//
// Set<String> setgnomeCVE = new HashSet<>();
//
// for (CVEData gnomeCVE : dao.getListGnomeCVE()) {
// setgnomeCVE.add(gnomeCVE.getCVE().replace(" ", ""));
// }
//
// for (String s : setgnomeCVE) {
// System.out.println(a);
// a++;
//
// doc = Jsoup.connect("http://www.cvedetails.com/cve/" + s).timeout(10 *
// 1000).get();
// Elements elements = doc.getElementsByAttributeValueMatching("href",
// Pattern.compile("https://git.gnome.org.*?\\?id="));
//
// for (Element e : elements) {
// // System.out.println(e.attr("href"));
// Document docLink = null;
// creatingCertificate();
// docLink = Jsoup.connect(e.text()).timeout(10 * 3000).get();
//// System.out.println(e.text());
// String commit = e.text().split("id=")[1];
// Elements tableElements = docLink.getElementsByClass("diffstaT");
// Elements tableHeaderEles = tableElements.select("thead tr th");
// Elements tableRowElements = tableElements.select(":not(thead) tr");
// for (int i = 0; i < tableRowElements.size(); i++) {
// Element row = tableRowElements.get(i);
// Elements rowItems = row.select("td");
// for (int y = 0; y < rowItems.size(); y++) {
//
// if (rowItems.get(y).text().length() > 3 &&
// !rowItems.get(y).text().contains("-rw-r-")) {
//// System.out.println("https://git.gnome.org/browse/gnumeric/diff/"
//// + rowItems.get(y).text() + "?id=" + commit);
// Document doc2 =
// Jsoup.connect("https://git.gnome.org/browse/"+e.text().split("browse/")[1].split("/commit")[0]+"/diff/"
// + rowItems.get(y).text() + "?id=" + commit).timeout(10 * 1000).get();
// Elements setfunction = doc2.select("div.hunk");
// Pattern pattern = Pattern.compile("(?<=\\s+@@).*?@@(.*?\\,.*)+");
// // @@(\s+)(\w+)(\n?.*\,)
//// https://git.gnome.org/browse/evolution/diff/composer/e-msg-composer.c?id=588c410718068388f8ce0004a71c104a4c89cce3
//// https://git.gnome.org/browse/gnumeric/diff/composer/e-msg-composer.c?id=588c410718068388f8ce0004a71c104a4c89cce3
//
// // (?<=\\s+@@).*?\\s*@@(.*?\\()
// for (int j = 0; j < setfunction.size(); j++) {
// // System.out.println(teste.get(i));
// Matcher matcher = pattern.matcher(setfunction.get(j).toString());
// while (matcher.find()) {
// if (matcher.group(1).length() > 0) {
// GnomeData gnomedata = new GnomeData();
// gnomedata.setFunction(matcher.group().split("@@ ")[1]);
// gnomedata.setFile(rowItems.get(y).text());
// gnomedata.setCommit(commit);
// gnomedata.setCVEID(s);
// dao.addInstace(gnomedata);
//
// }
//
// }
//
// }
//
// }
//
// }
// }
// }
// }
// }
// }
// lembrar que sao tres fluxos, o do objeto cve do banco, o dos links
// gitcommit, e o dos arquivos de correcao
// (@@.*?@@)(.*)? regex para

// proximos passos
// 1)coletar links gitcommit para cada CVE
// 2)coletar cada file usado no linkgit commit
// 3)linkar cada file para uma nova pagina e coletar as estruturas
// mudadas
//
// 3)coleta de metodos para cada file
// lembrar que nesta etapa o arquivo vem de um for e o commit de outro
// for e o cve de outro for
// Document doc2 = Jsoup
// .connect(
// "http://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/diff/drivers/char/tty_io.c?id=d281da7ff6f70efca0553c288bb883e8605b3862")
// .get();
// Elements teste = doc2.select("div.hunk");
// Pattern pattern = Pattern.compile("(?<=\\s+@@).*?\\s*@@(.*?\\()");
// // System.out.println(teste);
// for (int i = 0; i < teste.size(); i++) {
// // System.out.println(teste.get(i));
// Matcher matcher = pattern.matcher(teste.get(i).toString());
//
// while (matcher.find()) {
// if (matcher.group(1).length() > 0) {
// System.out.println(matcher.group().replace(" ", "").split("@@")[1]);
// }
// }
// }
// }
// }
//
//

// System.out.println(doc2.html());
// }

// 2)coleta de file por git link
// String html =
// "http://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=7873ca4e4401f0ecd8868bf1543113467e6bae61";
// try {
// Document doc = Jsoup.connect(html).get();
//
// Elements tableElements = doc.getElementsByClass("diffstat");
// Elements tableHeaderEles = tableElements.select("thead tr th");
// // System.out.println("headers");
//// for (int i = 0; i < tableHeaderEles.size(); i++) {
//// // System.out.println(tableHeaderEles.get(i).text());
//// }
//
// Elements tableRowElements = tableElements.select(":not(thead) tr");
//
// for (int i = 0; i < tableRowElements.size(); i++) {
// Element row = tableRowElements.get(i);
// Elements rowItems = row.select("td");
// for(int y=0;y<rowItems.size();y++){
//
// if(rowItems.get(y).text().length()>3 &&
// !rowItems.get(y).text().contains("-rw-r-") )
// try {
// Document doc2 =
// Jsoup.connect("http://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/diff/drivers/char/tty_io.c?id=d281da7ff6f70efca0553c288bb883e8605b3862").get();
//// System.out.println(doc2.html());
// Elements methods = doc2.getElementsByTag("body");
// System.out.println(methods);
// for(Element e: methods){
// System.out.println(e.toString().split("@@.*?@@"));
// }
//
// }catch (Exception e) {
// System.out.println(e.getMessage());
// }
//
// }

// }
// }catch (Exception e) {
// // TODO: handle exception
// }
//
// }
//
// get gitlink with commit of fixed and patch
// Set<String> set = new HashSet<String>();
// ProjectDataController dao = new ProjectDataController();
// for(CVEData kerneldata:dao.getListCVEKernel())
//
// {
// Document doc = Jsoup.connect("http://www.cvedetails.com/cve/" +
// kerneldata.getCVE().replace("", "")).get();
//
// Elements elements = doc.getElementsByAttributeValueMatching("href",
// Pattern.compile("commit;h="));
// // Set set = new HashSet<String>();
// for (Element e : elements) {
// set.add(e.attr("href"));
// System.out.println(e.attr("href"));
// // if(!e.attr("href").contains("http://www.")){
// // set.add(e.attr("href"));}
// }
// } for(
//
// String s:set)
//
// {
// System.out.println(s);
// }

// }
// lembrar que sao tres fluxos, o do objeto cve do banco, o dos links
// gitcommit, e o dos arquivos de correcao
// (@@.*?@@)(.*)? regex para

// proximos passos
// 1)coletar links gitcommit para cada CVE
// 2)coletar cada file usado no linkgit commit
// 3)linkar cada file para uma nova pagina e coletar as estruturas
// mudadas
//
// 3)coleta de metodos para cada file
// lembrar que nesta etapa o arquivo vem de um for e o commit de outro
// for e o cve de outro for
// Document doc2 = Jsoup
// .connect(
// "http://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/diff/drivers/char/tty_io.c?id=d281da7ff6f70efca0553c288bb883e8605b3862")
// .get();
// Elements teste = doc2.select("div.hunk");
// Pattern pattern = Pattern.compile("(?<=\\s+@@).*?\\s*@@(.*?\\()");
// // System.out.println(teste);
// for (int i = 0; i < teste.size(); i++) {
// // System.out.println(teste.get(i));
// Matcher matcher = pattern.matcher(teste.get(i).toString());
//
// while (matcher.find()) {
// if (matcher.group(1).length() > 0) {
// System.out.println(matcher.group().replace(" ", "").split("@@")[1]);
// }
// }
// }
// }
// }
//
//

// System.out.println(doc2.html());
// }

// 2)coleta de file por git link
// String html =
// "http://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=7873ca4e4401f0ecd8868bf1543113467e6bae61";
// try {
// Document doc = Jsoup.connect(html).get();
//
// Elements tableElements = doc.getElementsByClass("diffstat");
// Elements tableHeaderEles = tableElements.select("thead tr th");
// // System.out.println("headers");
//// for (int i = 0; i < tableHeaderEles.size(); i++) {
//// // System.out.println(tableHeaderEles.get(i).text());
//// }
//
// Elements tableRowElements = tableElements.select(":not(thead) tr");
//
// for (int i = 0; i < tableRowElements.size(); i++) {
// Element row = tableRowElements.get(i);
// Elements rowItems = row.select("td");
// for(int y=0;y<rowItems.size();y++){
//
// if(rowItems.get(y).text().length()>3 &&
// !rowItems.get(y).text().contains("-rw-r-") )
// try {
// Document doc2 =
// Jsoup.connect("http://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/diff/drivers/char/tty_io.c?id=d281da7ff6f70efca0553c288bb883e8605b3862").get();
//// System.out.println(doc2.html());
// Elements methods = doc2.getElementsByTag("body");
// System.out.println(methods);
// for(Element e: methods){
// System.out.println(e.toString().split("@@.*?@@"));
// }
//
// }catch (Exception e) {
// System.out.println(e.getMessage());
// }
//
// }

// }
// }catch (Exception e) {
// // TODO: handle exception
// }
//
// }
//
// get gitlink with commit of fixed and patch
// Set<String> set = new HashSet<String>();
// ProjectDataController dao = new ProjectDataController();
// for(CVEData kerneldata:dao.getListCVEKernel())
//
// {
// Document doc = Jsoup.connect("http://www.cvedetails.com/cve/" +
// kerneldata.getCVE().replace("", "")).get();
//
// Elements elements = doc.getElementsByAttributeValueMatching("href",
// Pattern.compile("commit;h="));
// // Set set = new HashSet<String>();
// for (Element e : elements) {
// set.add(e.attr("href"));
// System.out.println(e.attr("href"));
// // if(!e.attr("href").contains("http://www.")){
// // set.add(e.attr("href"));}
// }
// } for(
//
// String s:set)
//
// {
// System.out.println(s);
// }
