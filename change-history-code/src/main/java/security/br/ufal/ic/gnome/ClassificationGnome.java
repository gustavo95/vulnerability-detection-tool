package security.br.ufal.ic.gnome;

import java.util.ArrayList;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import security.br.ufal.ic.classification.ClassificationDataStatitics;
import security.br.ufal.ic.xen.ColectCommitsXen;

public class ClassificationGnome {

    public static void main(String[] args) {

        ProjectDataControllerGnome dao = new ProjectDataControllerGnome();
        List<GnomeData> list = dao.getListGnome();

        for (GnomeData gnomeObject : list) {
            System.out.println(gnomeObject.getFile());
            if (gnomeObject.getFile().contains("src/goabackend/")) {
                System.out.println("tem");

                ArrayList<String> listCommits = new ArrayList<String>();
                String a = ColectCommitsXen.executarComando("git log " + gnomeObject.getFile());

                Pattern pattern = Pattern.compile("(commit)\\s*(.*)");
                Matcher matcher = pattern.matcher(a);
                while (matcher.find()) {
                    if (matcher.group(2).length() == 40) {
                        listCommits.add(matcher.group(2));
                    }

                }
                for (int i = listCommits.size() - 1; i > 0; i--) {
                    if (listCommits.get(i).equals(gnomeObject.getCommit())) {
                        break;
                    }
                    String[] diff = {};
                    ClassificationDataStatitics classify = null;
                    GnomeClassify gnomeClassify = null;
                    diff = ColectCommitsXen.executarComando("git diff " + listCommits.get(i) + " "
                            + listCommits.get(i - 1) + " " + gnomeObject.getFile()).split("(@@ -)");

                    for (String s : diff) {
                        String function = "";

                        Pattern patternFunction = Pattern.compile("@@ (.*?\\,.*)+");
                        Matcher matcherFunction = patternFunction.matcher(s);
                        while (matcherFunction.find()) {
                            function = matcherFunction.group(1);
                        }

                        if (function.equals(gnomeObject.getFunction())) {
                            classify = new ClassificationDataStatitics(gnomeObject.getFile(), s, listCommits.get(i - 1),
                                    gnomeObject.getFunction());
                            gnomeClassify = new GnomeClassify();
                            gnomeClassify.setCommit(listCommits.get(i - 1));
                            gnomeClassify.setFile(gnomeObject.getFile());
                            gnomeClassify.setFunction(function);
                            gnomeClassify.setCVEID(gnomeObject.getCVEID());
                            gnomeClassify.setVulnerability(1);
                            gnomeClassify.setNConditionalExtraneousChanges(classify.getNConditionalExtraneousChanges());
                            gnomeClassify.setNConditionalMissingChanges(classify.getNConditionalMissingChanges());
                            gnomeClassify
                                    .setNFunctionCallExtraneousChanges(classify.getNFunctionCallExtraneousChanges());
                            gnomeClassify.setNFunctionCallMissingChanges(classify.getNFunctionCallMissingChanges());
                            gnomeClassify.setNMethodExtraneousChanges(classify.getNMethodExtraneousChanges());
                            gnomeClassify.setNMethodMissingChanges(classify.getNMethodMissingChanges());
                            gnomeClassify.setNVariableExtraneousChanges(classify.getNVariableExtraneousChanges());
                            gnomeClassify.setNVariableMissingChanges(classify.getNVariableMissingChanges());
                            dao.addInstace(gnomeClassify);
                        }

                    }

                }

            }
        }

    }

}
