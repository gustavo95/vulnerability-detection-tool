package security.br.ufal.ic.temp;

import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class Utils {

	public static String execueCommand(String comando) {

		Process process = null;
		try {
			process = Runtime.getRuntime().exec(comando);
		} catch (IOException e) {
			e.printStackTrace();
		}

		InputStream inputStream = process.getInputStream();

		String saida = "";

		{
			int n;

			try {
				while ((n = inputStream.read()) != -1) {
					saida += (char) n;
				}
			} catch (IOException e) {
				e.printStackTrace();
			}
		}

		return saida + "\n";
	}

	public static Set<String> getIntervalLinesChanged(String diff, String commit) {
		Set<String> intervalLines = new LinkedHashSet<>();
		String[] gitdiff = diff.split("\\n");
		int intLine = 0;
		int endline = 0;
		for (String line : gitdiff) {
			endline++;
			if (commit.contains("^")) {
				if (line.startsWith("+"))
					endline--;
			} else {
				if (line.startsWith("-"))
					endline--;
			}
			if (line.matches("@@.*@@.*|diff --git.*")) {

				if (line.contains("@@")) {
					if (intLine != 0)
						intervalLines.add((intLine + 3) + "-" + (endline - 5));
					if (commit.contains("^")) {
						line = line.replaceAll("@@", "").replaceAll(" ", "")
								.split("[+]")[0].split(",")[0].split("[-]")[1];
						intLine = Integer.parseInt(line);
						endline = intLine;
					} else {
						line = line.replaceAll("@@", "").replaceAll(" ", "")
								.split("[+]")[1];
						line = line.split(",")[0];
						intLine = Integer.parseInt(line);
						endline = intLine;
					}
				} else if (line.contains("diff --git")) {
					if (intLine != 0)
						intervalLines.add((intLine + 3) + "-" + (endline - 4));
					endline = 0;
				}
			}
		}
		if (intLine != 0)
			intervalLines.add((intLine + 3) + "-" + (endline - 4));// +3 and -4
																	// for
																	// interval
																	// from git
		return intervalLines;
	}

	public static ArrayList<Set<String>> getSetLineNumer(String commit,
			String file) {

		ArrayList<Set<String>> temp = new ArrayList<Set<String>>();

		String diff = Utils.execueCommand("git show " + commit + " -- " + file);

		List<String> changesRemoved = new ArrayList<String>();
		List<String> changesadd = new ArrayList<String>();
		Set<String> changesRemovedLine = new LinkedHashSet<String>();
		Set<String> changesaddLine = new LinkedHashSet<String>();
		Pattern pattern = Pattern.compile("^(\\-|\\+)(.*)");
		for (int i = 0; i < diff.split("(@@.*\\-)").length; i++) {
			String diff2 = "@@ -" + diff.split("(@@.*\\-)")[i];
			for (String s2 : diff2.split("@.*@.*")) {

				for (String stringfinder : s2.split("\n")) {
					if (stringfinder.startsWith("+")) {
						Matcher matcher = pattern.matcher(stringfinder);
						matcher.find();
						changesadd.add(matcher.group(2));
					}

					else if (stringfinder.startsWith("-")) {
						Matcher matcher = pattern.matcher(stringfinder);
						matcher.find();
						changesRemoved.add(matcher.group(2));
					}

				}
			}

			for (String changeaux : changesadd) {
				String[] setFileToAddvedAnalysis = Utils.execueCommand(
						"git show " + commit + ":" + file).split("\n");
				for (int j = 0; j < setFileToAddvedAnalysis.length; j++) {
					if (setFileToAddvedAnalysis[j].equals(changeaux)) {
						changesaddLine.add(String.valueOf(j + 1));
					}

				}
			}

			for (String changeaux : changesRemoved) {

				String[] setFileToremovedAnalysis = Utils.execueCommand(
						"git show " + commit + "^:" + file).split("\n");
				for (int j = 0; j < setFileToremovedAnalysis.length; j++) {
					if (setFileToremovedAnalysis[j].equals(changeaux)) {
						changesRemovedLine.add(String.valueOf(j + 1));
					}

				}
			}

		}

		temp.add(changesaddLine);
		temp.add(changesRemovedLine);

		return temp;

	}

	public static void main(String[] args) {

		Utils.getSetLineNumer("7ca56053b29633ef08b14e5ca16c663363edac36",
				"arch/alpha/kernel/sys_takara.c");

	}
}