package security.br.ufal.ic.mozilla;

import java.util.ArrayList;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import security.br.ufal.ic.classification.ClassificationDataStatitics;
import security.br.ufal.ic.kernel.KernelData;
import security.br.ufal.ic.xen.ColectCommitsXen;

public class MozillaClassification {

    public static void main(String[] args) {

        ProjectDataControllerMozilla dao = new ProjectDataControllerMozilla();
        List<MozillaFunction> list = dao.getListMozillaFunction();
        final Pattern pattern = Pattern.compile("(commit)\\s*(.*)");
        final Pattern patternFunction = Pattern.compile("@@ (.*?\\,.*)+");
        boolean functionValidation =false;
        for (MozillaFunction mozillaObject : list) {
            ArrayList<String> listCommits = new ArrayList<String>();
            String a = ColectCommitsXen.executarComando("git log -- " + mozillaObject.getFILE_PATH());

            Matcher matcher = pattern.matcher(a);
            while (matcher.find()) {
                if (matcher.group(2).length() == 40) {
                    listCommits.add(matcher.group(2));
                }

            }
            for (int i = listCommits.size() - 1; i > 0; i--) {
                if (listCommits.get(i).equals(mozillaObject.getPCOMMIT())) {
                    break;
                }
                String[] diff = {};
                ClassificationDataStatitics classify = null;
                MozillaClassify mozillaClassify = null;
                diff = ColectCommitsXen.executarComando("git diff " + listCommits.get(i) + " " + listCommits.get(i - 1)
                        + " -- " + mozillaObject.getFILE_PATH()).split("(@@.*\\+)");

                for (String s : diff) {
                    String function = "";

                    Matcher matcherFunction = patternFunction.matcher(s);
                    while (matcherFunction.find()) {
                        if (!"".equals(function)) {
                            // it would be great to have this logs in files... 
                            System.out.println("\n\n [MOZ] Shouldn't happen. Function ignored " + function);
                            System.out.println("\n\n ");
                        }
                        function = matcherFunction.group(1);
                    }
                    
//                    for(MozillaFunction functionVulnerability: list){
//                    	if(functionVulnerability.getFUNCTION().equals(function)){
//                    		 functionValidation = true;
//                    	}
//                    }
                    // System.out.println("-----------------------------------------------------------------------");
                    // System.out.println(function);
                    // System.out.println("git diff " + listCommits.get(i) + " "
                    // + listCommits.get(i - 1) + " -- "
                    // + mozillaObject.getFILE_PATH());
                    // System.out.println(mozillaObject.getFUNCTION());
                    // System.out.println("-----------------------------------------------------------------------");

                    if ((function.contains(mozillaObject.getFUNCTION())&&function.length()>0)) {
//                        if (function.contains("::")) {
//                    	&&functionValidation==false
//                            System.out.println(true);
                            classify = new ClassificationDataStatitics(mozillaObject.getFUNCTION(), s,
                                    listCommits.get(i - 1), mozillaObject.getFUNCTION());
                            mozillaClassify = new MozillaClassify();
                            mozillaClassify.setCommit(listCommits.get(i - 1));
                            mozillaClassify.setFile(mozillaObject.getFILE_PATH());
                            mozillaClassify.setFunction(function);
                            mozillaClassify.setCVEID(mozillaObject.getV_ID());
                            mozillaClassify.setVulnerability(1);
                            mozillaClassify
                                    .setNConditionalExtraneousChanges(classify.getNConditionalExtraneousChanges());
                            mozillaClassify.setNConditionalMissingChanges(classify.getNConditionalMissingChanges());
                            mozillaClassify
                                    .setNFunctionCallExtraneousChanges(classify.getNFunctionCallExtraneousChanges());
                            mozillaClassify.setNFunctionCallMissingChanges(classify.getNFunctionCallMissingChanges());
                            mozillaClassify.setNMethodExtraneousChanges(classify.getNMethodExtraneousChanges());
                            mozillaClassify.setNMethodMissingChanges(classify.getNMethodMissingChanges());
                            mozillaClassify.setNVariableExtraneousChanges(classify.getNVariableExtraneousChanges());
                            mozillaClassify.setNVariableMissingChanges(classify.getNVariableMissingChanges());
                            dao.addInstace(mozillaClassify);
                        }

                    }
                }

            }
        }


}
