package security.br.ufal.ic.kernel;

import java.util.ArrayList;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import security.br.ufal.ic.classification.ClassificationDataStatitics;
import security.br.ufal.ic.gnome.GnomeClassify;
import security.br.ufal.ic.xen.ColectCommitsXen;

public class ClassificationKernel {

    public static void main(String[] args) {

        ProjectDataControllerKernel dao = new ProjectDataControllerKernel();
        List<KernelData> list = dao.getListKenelData();

        // for performance... compile once, use multiple times...
        final Pattern pattern = Pattern.compile("(commit)\\s*(.*)");
        final Pattern patternFunction = Pattern.compile("@@ (.*?\\,.*)+");

        for (KernelData KernelObject : list) {

            ArrayList<String> listCommits = new ArrayList<String>();
            String a = ColectCommitsXen.executarComando("git log --stat --all -- " + KernelObject.getFile());

            Matcher matcher = pattern.matcher(a);
            while (matcher.find()) {
                if (matcher.group(2).length() == 40) {
                    listCommits.add(matcher.group(2));
                }
            }
            for (int i = listCommits.size() - 1; i > 0; i--) {
                if (listCommits.get(i).equals(KernelObject.getCommit())) {
                    break;
                }
                String[] diff;
                ClassificationDataStatitics classify = null;
                KernelClassify kernelClassify = null;
                diff = ColectCommitsXen.executarComando("git diff " + listCommits.get(i) + " " + listCommits.get(i - 1)
                + " -- " + KernelObject.getFile()).split("(@@.*\\+)");

                for (String s : diff) {
//                	System.out.println(listCommits.get(i) + " " + listCommits.get(i - 1)+" -- " + KernelObject.getFile());
//                	System.out.println(s);
//                	System.out.println("-----------------------------------------------------------------------------------");
//                	System.out.println("-----------------------------------------------------------------------------------");
//                	System.out.println("-----------------------------------------------------------------------------------");

                    String function = "";
                    boolean functionValidation=false;

                    Matcher matcherFunction = patternFunction.matcher(s);

                    // does it match multiple times??
                    while (matcherFunction.find()) {
                        if (!"".equals(function)) {
                            // it would be great to have this logs in files... 
                            System.out.println("\n\n Shouldn't happen. Function ignored " + function);
                            System.out.println("\n\n " );
                        }
                        function = matcherFunction.group(1);
                    }
                    for(KernelData functionVulnerability: list){
                    	if(functionVulnerability.getFunction().equals(function)){
                    		functionValidation=true;
                    	}
                    }
                    if (!function.equals(KernelObject.getFunction())&&function.length()>0&&functionValidation==false) {
                    	System.out.println(function +"  #    "+KernelObject.getFunction());
                        classify = new ClassificationDataStatitics(KernelObject.getFile(), s, listCommits.get(i - 1),
                                KernelObject.getFunction());
                        kernelClassify = new KernelClassify();
                        kernelClassify.setCommit(listCommits.get(i - 1));
                        kernelClassify.setFile(KernelObject.getFile());
                        kernelClassify.setFunction(function);
                        kernelClassify.setCVEID(KernelObject.getCVEID());
                        kernelClassify.setVulnerability(0);
                        kernelClassify.setNConditionalExtraneousChanges(classify.getNConditionalExtraneousChanges());
                        kernelClassify.setNConditionalMissingChanges(classify.getNConditionalMissingChanges());
                        kernelClassify.setNFunctionCallExtraneousChanges(classify.getNFunctionCallExtraneousChanges());
                        kernelClassify.setNFunctionCallMissingChanges(classify.getNFunctionCallMissingChanges());
                        kernelClassify.setNMethodExtraneousChanges(classify.getNMethodExtraneousChanges());
                        kernelClassify.setNMethodMissingChanges(classify.getNMethodMissingChanges());
                        kernelClassify.setNVariableExtraneousChanges(classify.getNVariableExtraneousChanges());
                        kernelClassify.setNVariableMissingChanges(classify.getNVariableMissingChanges());
                        dao.addInstaceKernelHistory(kernelClassify);
                    }
                }
            }
        }
    }
}
