package security.br.ufal.ic.temp;

import java.io.IOException;




import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;

import security.br.ufal.ic.xen.ProjectXenDAOCOntroller;
import security.br.ufal.ic.xen.ProjectXenData;
import security.br.ufal.ic.xen.ProjectXenDataFunctionIndex;


//Criar um matcher e um pattern para cada busca, uma para os normais do index e tal, e outra para as funcoes

public class IndexCollectorETste {

	
	public static ArrayList<Set> getcodeVulnerabilitiesReport()  {
		Pattern pattern2 = Pattern.compile("(xsa.*?\\.patch)");
		 
		Set<String> patchs = null;
		ArrayList<Set> temp = new ArrayList<Set>();
		try{
		for(int i=26;i<=141;i++){
			if(i==115){i++;}
		Document doc = Jsoup.connect("http://xenbits.xen.org/xsa/advisory-"+i+".html").get();
		Elements newsHeadlines = doc.getElementsByAttributeValueEnding("href",".patch");
//		System.out.println("-----------"+i+"---------------");
		Matcher matcher2 = pattern2.matcher(newsHeadlines.text());
		patchs= new HashSet<String>();
		while(matcher2.find()){
			patchs.add(matcher2.group(1)+" advisory-"+i);
			
		}
		temp.add(patchs);
		}
		
		}
		catch (Exception e) {
			e.getMessage();			
		}
		return temp;
	}
	
//	(---\s*\a.*?xen) -- para contar codificacoes em projetos zen po	
//(--\s*git.*?(xen.*?\s).*index\s+(.*?\s)) -- coletar index, file by modification in each patch
//	(--\s*git.*?(hw.*?\s).*index\s*(.+?\s))
	public static void main(String[] args) throws IOException {
		
		
		ArrayList<Set> lista=getcodeVulnerabilitiesReport();
//		Pattern pattern = Pattern.compile("(---.*?xen\\/.*?\\.c)");
//		Pattern pattern2 = Pattern.compile("(---.*?hw\\/)");
//		Pattern pattern3 = Pattern.compile("(---.*?tools\\/)");
//		Pattern pattern4 = Pattern.compile("(---.*?stubdom\\/)");
//		Pattern pattern5 = Pattern.compile("(--\\s*git.*?xen.*index)");
//		Pattern pattern6 = Pattern.compile("(--\\s*git.*?hw.*index)");
//		Pattern pattern7 = Pattern.compile("(--\\s*git.*?tools.*index)");
//		Pattern pattern8 = Pattern.compile("(--\\s*git.*?stubdom.*index)");
//		Pattern pattern9 = Pattern.compile("(--\\s*git.*?(xen.*?\\s).*index\\s+(.*?\\s))");
//		Pattern pattern10 = Pattern.compile("(--\\s*git.*?(hw.*?\\s).*index\\s*(.+?\\s))");
//		Pattern pattern11 = Pattern.compile("(--\\s*git.*?(tool.*?\\s).*index\\s*(.+?\\s))");
		Pattern pattern11 = Pattern.compile("(--\\s*git.*?(hw|xen|tool.*?\\s).*index\\s*(.+?\\S+))|(@@\\s*(private|public|protected|static|int|virtual|void|boolean|float|char|String).*(\\(.*\\)))");

//		

		TesteDAOCOntroller daoXen = new TesteDAOCOntroller();
		Teste xenObject = new Teste();
		ProjectXenData QemuObject = new ProjectXenData();
		ProjectXenData toolObject = new ProjectXenData();
		ProjectXenData stbdObject = new ProjectXenData();
		
		
		int numberModificationsXen=0;
		int numberModificationsQemu=0;
		int numberModificationsTools=0;
		int numberModificationsStubdom=0;
		
		
		int numberIndexXen=0;
		int numberIndexQemu=0;
		int numberIndexTools=0;
		int numberIndexStubdom=0;

		for(Set<String> s : lista){
			for(String e: s){
				Document doc = Jsoup.connect("http://xenbits.xen.org/xsa/"+e.split(" ")[0]).get();
				String docText = doc.getElementsByTag("body").html();
//				System.out.println(docText);
				
				//criar if do patch 68 para ver se tem o index e pq nao localizou
				if(e.split(" ")[0].equals("xsa68.patch")){
				System.out.println(docText);
				}
//				Matcher matcher = pattern.matcher(docText);
//				Matcher matcher2 = pattern2.matcher(docText);
//				Matcher matcher3 = pattern3.matcher(docText);
//				Matcher matcher4 = pattern4.matcher(docText);
//				
//				Matcher matcher5 = pattern5.matcher(docText);
//				Matcher matcher6 = pattern6.matcher(docText);
//				Matcher matcher7 = pattern7.matcher(docText);
//				Matcher matcher8 = pattern8.matcher(docText);
//				
//				Matcher matcher9 = pattern9.matcher(docText);
//				Matcher matcher10 = pattern10.matcher(docText);
				Matcher matcher11 = pattern11.matcher(docText);
				
//				while(matcher.find()){
//					if(!matcher.group(1).isEmpty()){
//						numberModificationsXen+=1;
//					}
//				}
//				
//				while(matcher2.find()){
//					if(!matcher2.group(1).isEmpty()){
//						numberModificationsQemu+=1;
//					}
//				}
//				
//				while(matcher3.find()){
//					if(!matcher3.group(1).isEmpty()){
//						numberModificationsTools+=1;
//					}
//				}
//				
//				while(matcher4.find()){
//					if(!matcher4.group(1).isEmpty()){
//						numberModificationsStubdom+=1;
//					}
//				}
//				
//				
//				
//				while(matcher5.find()){
//					if(!matcher5.group(1).isEmpty()){
//						numberIndexXen+=1;
//					}
//				}
//				
//				while(matcher6.find()){
//					if(!matcher6.group(1).isEmpty()){
//						numberIndexQemu+=1;
//					}
//				}
//				
//				while(matcher7.find()){
//					if(!matcher7.group(1).isEmpty()){
//						numberIndexTools+=1;
//					}
//				}
//				
//				while(matcher8.find()){
//					if(!matcher8.group(1).isEmpty()){
//						numberIndexStubdom+=1;
//					}
//				}
//				
//				while(matcher9.find()){
//					if(!matcher9.group(1).isEmpty()){
//					ProjectXenDataFunctionIndex functionIndex = new ProjectXenDataFunctionIndex();
//					functionIndex.setFile(matcher9.group(2).replace(" ", ""));
//					functionIndex.setPatch(e.split(" ")[0]);
//					functionIndex.setXSA(e.split(" ")[1]);
//					functionIndex.setIndexDiff(matcher9.group(3).replace(" ", ""));
//					
//					daoXen.addInstaceFUnction(functionIndex);
//
//					}
//				}
////				
//				while(matcher10.find()){
//					if(!matcher10.group(1).isEmpty()){
//					ProjectXenDataFunctionIndex functionIndex = new ProjectXenDataFunctionIndex();
//					functionIndex.setFile(matcher10.group(2).replace(" ", ""));
//					functionIndex.setPatch(e.split(" ")[0]);
//					functionIndex.setXSA(e.split(" ")[1]);
//					functionIndex.setIndexDiff(matcher10.group(3).replace(" ", ""));
//					
//					daoXen.addInstaceFUnction(functionIndex);
//
//					}
//				}
//				
				while(matcher11.find()){
					List<String> lista1 = new ArrayList<String>();

					while(matcher11.group(4).isEmpty()){
						lista1.add(matcher11.group(4));
					}

					if(!matcher11.group(1).isEmpty()){
					Teste functionIndex = new Teste();
					
					functionIndex.setFile(matcher11.group(2).replace(" ", ""));
					functionIndex.setPatch(e.split(" ")[0]);
					functionIndex.setXSA(e.split(" ")[1]);
					functionIndex.setIndexDiff(matcher11.group(3).replace(" ", ""));
					functionIndex.setFunctions(lista1);
					
					daoXen.addInstace(functionIndex);

					}
				}
				
				
				
			}
			}
			
//		
//		xenObject.setProject("Xen");
//		xenObject.setNumberModifications(numberModificationsXen);
//		xenObject.setNumberOfIndex(numberIndexXen);
//		
//		QemuObject.setProject("Qemu");
//		QemuObject.setNumberModifications(numberModificationsQemu);
//		QemuObject.setNumberOfIndex(numberIndexQemu);
//		
//		
//		toolObject.setProject("Tool");
//		toolObject.setNumberModifications(numberModificationsTools);
//		toolObject.setNumberOfIndex(numberIndexTools);
//		
//		
//		
//		daoXen.addInstace(xenObject);
//		daoXen.addInstace(QemuObject);
//		
//		daoXen.addInstace(toolObject);
		
		
//		
		
		
		
	}
}
