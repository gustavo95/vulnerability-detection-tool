package security.br.ufal.ic.xen;

import java.util.ArrayList;
import java.util.List;

import org.hibernate.HibernateError;
import org.hibernate.HibernateException;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;

public class ProjectXenDAOCOntroller {
	
	final ThreadLocal<Session> threadLocal = new ThreadLocal<Session>();
	@SuppressWarnings("deprecation")
	final SessionFactory sessionFactory = new Configuration()
			.configure().buildSessionFactory();
	Session session = threadLocal.get();
	
	
	public void addInstace(ProjectXenData xenData) {
		

			session = sessionFactory.openSession();
			
			
			try {
				session.beginTransaction();
				session.save(xenData);
				session.getTransaction().commit();
				session.close();
			} catch (HibernateException e) {
				e.printStackTrace();
				session.getTransaction().rollback();

			}
		
	}
	
	public void addInstaceFUnction(ProjectXenDataFunctionIndex xenData) {
		

		session = sessionFactory.openSession();
		
		
		try {
			session.beginTransaction();
			session.save(xenData);
			session.getTransaction().commit();
			session.close();
		} catch (HibernateException e) {
			e.printStackTrace();
			session.getTransaction().rollback();

		}
	
}
	
public void addInstaceFileCommit(CommitFileXen xenData) {
		

		session = sessionFactory.openSession();
		
		
		try {
			session.beginTransaction();
			session.save(xenData);
			session.getTransaction().commit();
			session.close();
		} catch (HibernateException e) {
			e.printStackTrace();
			session.getTransaction().rollback();

		}
	
}
public void addInstaceFUnctionFile(FunctionsAndFilePatcherXen xenData) {
		

		session = sessionFactory.openSession();
		
		
		try {
			session.beginTransaction();
			session.save(xenData);
			session.getTransaction().commit();
			session.close();
		} catch (HibernateException e) {
			e.printStackTrace();
			session.getTransaction().rollback();

		}
	
}
public void addInstace(XenClassify xenData) {
	

	session = sessionFactory.openSession();
	
	
	try {
		session.beginTransaction();
		session.save(xenData);
		session.getTransaction().commit();
		session.close();
	} catch (HibernateException e) {
		e.printStackTrace();
		session.getTransaction().rollback();

	}

}
public void addInstace(XenDataCodeChurn xenDataCodeChurn) {
	

	session = sessionFactory.openSession();
	
	
	try {
		session.beginTransaction();
		session.save(xenDataCodeChurn);
		session.getTransaction().commit();
		session.close();
	} catch (HibernateException e) {
		e.printStackTrace();
		session.getTransaction().rollback();

	}

}

	public List<ProjectXenDataFunctionIndex> getList (){
		session = sessionFactory.openSession();
		List<ProjectXenDataFunctionIndex> list = null;
		try {
			session.beginTransaction();
			list= session.createCriteria(ProjectXenDataFunctionIndex.class).list();

			session.close();
		} catch (HibernateException e) {
			e.printStackTrace();
			session.getTransaction().rollback();

		}
	
		return list;


	}
	public List<FunctionsAndFilePatcherXen> getListFunction(){
		session = sessionFactory.openSession();
		List<FunctionsAndFilePatcherXen> list = null;

		try {
			session.beginTransaction();
			list= session.createCriteria(FunctionsAndFilePatcherXen.class).list();

			
			session.close();
		} catch (HibernateException e) {
			e.printStackTrace();
			session.getTransaction().rollback();

		}
	
		return list;

	
	}
	public List<XenClassify> getListXenClassify(){
		session = sessionFactory.openSession();
		List<XenClassify> list = null;

		try {
			session.beginTransaction();
		list= session.createCriteria(XenClassify.class).list();

			
			session.close();
		} catch (HibernateException e) {
			e.printStackTrace();
			session.getTransaction().rollback();

		}
	
		return list;

	
	}
}
