package security.br.ufal.ic.temp;

import java.util.HashMap;
import java.util.Map;

import org.eclipse.cdt.core.dom.ast.ASTVisitor;
import org.eclipse.cdt.core.dom.ast.IASTDeclaration;
import org.eclipse.cdt.core.dom.ast.IASTStatement;
import org.eclipse.cdt.core.dom.ast.IASTTranslationUnit;
import org.eclipse.cdt.core.dom.lrparser.gnu.GPPLanguage;
import org.eclipse.cdt.core.parser.DefaultLogService;
import org.eclipse.cdt.core.parser.FileContent;
import org.eclipse.cdt.core.parser.IParserLogService;
import org.eclipse.cdt.core.parser.IScannerInfo;
import org.eclipse.cdt.core.parser.IncludeFileContentProvider;
import org.eclipse.cdt.core.parser.ScannerInfo;
import org.eclipse.cdt.internal.core.dom.parser.cpp.CPPASTExpressionStatement;
import org.eclipse.cdt.internal.core.dom.parser.cpp.CPPASTFunctionDefinition;
import org.eclipse.cdt.internal.core.dom.parser.cpp.CPPASTIfStatement;
import org.eclipse.cdt.internal.core.dom.parser.cpp.CPPASTSimpleDeclaration;
import org.eclipse.core.runtime.CoreException;

public class CreateASTCPPC {
	static int ifcount = 0;
	static int funcdefinitioncount = 0;
	static int funccallcount = 0;
	static int variablecount = 0;

	public static void main(String[] args) throws Exception, CoreException {
		parse("/Users/marcuspianco/Documents/Projects/security-change-history/change-history-code/src/main/java/security/br/ufal/ic/temp/3-numeros-em-ordem-crescente.c");
	}

	public static void parse(String str) throws CoreException {

		System.out.println(123);
		long start = System.currentTimeMillis();

		FileContent fileContent = FileContent.createForExternalFileLocation(
				str, "UTF-8");

		System.out.println(fileContent.getFileLocation());

		Map definedSymbols = new HashMap();
		String[] includePaths = new String[0];
		IScannerInfo info = new ScannerInfo(definedSymbols, includePaths);
		IParserLogService log = new DefaultLogService();

		IncludeFileContentProvider emptyIncludes = IncludeFileContentProvider
				.getEmptyFilesProvider();

		int opts = 8;
		IASTTranslationUnit tu = GPPLanguage.getDefault()
				.getASTTranslationUnit(fileContent, info, emptyIncludes, null,
						opts, log);

		ASTVisitor visitor = new ASTVisitor(true) {

			public int visit(IASTDeclaration decl) {
				
				if(decl instanceof CPPASTFunctionDefinition){
				funcdefinitioncount++;}
				else if(decl instanceof CPPASTSimpleDeclaration ){
					variablecount++;
				}
//				System.out.println(decl.getClass().getSimpleName() + "linha "
//						+ decl.getFileLocation().getStartingLineNumber());

				return PROCESS_CONTINUE;

			}

			public int visit(IASTStatement statment) {
				if (statment instanceof CPPASTIfStatement) {
					ifcount ++;
//					System.out
//							.println("----------------------if-------------------------"+ statment.getFileLocation().getStartingLineNumber()) ;
				}
				else if (statment instanceof CPPASTExpressionStatement) {
					if(!statment.getRawSignature().contains("printf")&&!statment.getRawSignature().contains("scanf"))
					funccallcount++;
//					System.out.println("----------------------function: "
//							+ statment.getRawSignature());
				}
				
				System.out.println(statment.getClass().getSimpleName()
						+ "linha "
						+ statment.getFileLocation().getStartingLineNumber());

				return PROCESS_CONTINUE;

			}

		};

		tu.accept(visitor);
		long end = System.currentTimeMillis();
		
		System.out.println(ifcount);
		System.out.println(funccallcount);
		System.out.println(variablecount);
		System.out.println(funcdefinitioncount);
		System.out.println("Took : " + ((end - start) / 1000.0));

	}
}