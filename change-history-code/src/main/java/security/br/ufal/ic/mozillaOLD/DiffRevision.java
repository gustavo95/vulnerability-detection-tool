package security.br.ufal.ic.mozillaOLD;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class DiffRevision {

	
	//Executar comandos de cmd ou power shell atravez de cdigo java
	public static String exe(String command) {
		String temp = "";
		Process aux = null;
		int number = 0;
		Runtime run = Runtime.getRuntime();

		try {
			aux = run.exec(command);
		} catch (IOException e) {
			e.printStackTrace();
		}
		command = aux.toString();
		InputStream inputStream = aux.getInputStream();
		try {
			while ((number = inputStream.read()) != -1) {
				temp += (char) number;
			}
		} catch (IOException e) {
			e.printStackTrace();
		}

		return temp + "\n";

	}
	// Pega uma lista de Revis�es da primeira at� a ultima.
	private ArrayList<String> getListRevision(String wayFile) {
		ArrayList<String> list = new ArrayList();

		Pattern pattern = Pattern.compile("(?<=revision )([\\d.])+");
		// System.out.println(wayFile);
		String log = exe("cvs log " + " " + wayFile);

		Matcher matcher = pattern.matcher(log);
		System.out.println(log);
		while (matcher.find()) {
			String result = matcher.group();
			list.add(result);
		}
		return list;

	}
//	Esse m�todo coleta todas as linhas de todos os diffs de todas as revi�es de todos os arquivos
//  � nele que devemos refinar ou criar um novo, para realizar nossa coleta
	private Map<String, ArrayList<ArrayList<String>>> getContentChange(String fileWays) throws IOException {
		ArrayList<String> listRevision;
		BufferedReader br_file = new BufferedReader(new FileReader("data//" + fileWays));
		String line = br_file.readLine();
		String diff = "";
		Map<String, ArrayList<ArrayList<String>>> map = new HashMap<String, ArrayList<ArrayList<String>>>();
		// String line = " ";
		while (line != null) {
			System.out.println("Enter here one");

			ArrayList<String> linesAdd = new ArrayList<String>();
			ArrayList<String> linesRemove = new ArrayList<String>();
			map.put(line, new ArrayList<ArrayList<String>>());
			map.get(line).add(linesAdd);
			map.get(line).add(linesRemove);

			listRevision = getListRevision(line);
			// System.out.println(listRevision.size());

			String temp = "";

			for (int i = 0; i < listRevision.size() - 1; i++) {
				System.out.println("Enter here two");
				temp = listRevision.get(i + 1);
				diff = exe("cvs diff -u -r" + temp + " -r " + listRevision.get(i) + " " + line);
				System.out.println(temp + "," + listRevision.get(i));
				Pattern pattern = Pattern.compile("\\+(.*)|\\-(.*)");

				Matcher matcher = pattern.matcher(diff);
				while (matcher.find()) {
					if (matcher.group(1) != null) {
						map.get(line).get(0).add(matcher.group(1));
						System.out.println(line + ", " + matcher.group(1));
					} else if (matcher.group(2) != null) {
						map.get(line).get(0).add(matcher.group(2));
						System.out.println(line + ", " + matcher.group(2));
					}
				}

			}

			line = br_file.readLine();
		}

		br_file.close();

		return map;

	}
	
	

	
	
	
	public static void main(String[] args) throws IOException {

		
		DiffRevision diff = new DiffRevision();
		
		
		
		// Map<String, ArrayList<ArrayList<String>>> map = 	diffs.getContentChange("way.txt");
		

		//System.out.println(diffs.exe("powershell.exe ls"));

		// System.out.println(diffs.exe("cvs log"));

		// Pattern pattern = Pattern.compile("(?<=revision )([\\d.])+");
		// String log = "revision 1.2.3.4";

		// System.out.println(diffs.exe("cvs log
		// accessible/public/msaa/AccessibleMarshal.c"));

		// BufferedReader reader = null;
		// File file = new File("data/way.txt");
		// reader = new BufferedReader(new FileReader(file));
		// String text = "";

		//// while ((text = reader.readLine()) != null) {
		//// System.out.println(text);
		// String log = diffs.exe("cvs log"+"
		//// accessible/public/msaa/AccessibleMarshal.c");
		// System.out.println(log);

//		 ArrayList<String> list = diff.getListRevision("content/xul/document/src/nsXULDocument.cpp");
		ArrayList<String> list = diff.getListRevision("layout/style/nsCSSLoader.cpp");
		 
		 
		System.out.println(list.size());
//		
//		String aux="";
//		 for(int i=0;i<list.size();i++){
//			 for(int k=1;k<list.size();k++){
//				 if(DiffRevision.menorQueVersao(list.get(k), list.get(i))){
//					 aux=list.get(i);
//					 list.set(i, list.get(k));
//					 list.set(k, aux);
//				 }
//			 }
//			 
//			 
//		 }
//		 
		 for(int i=0;i<list.size();i++){
			 System.out.println(list.get(i));
			 
			 
		 }
		
		// Pattern pattern = Pattern.compile("(?<=revision )([\\d.])+");

		// Matcher matcher = pattern.matcher(log);

//		String log = "revision 1.2.3.4";
//
	
		
//		Pattern pattern = Pattern.compile("(?<!if\\s)\\((.*?)\\)");

//		Matcher matcher = pattern.matcher(
//				"if(NS_GetAccessibilityService(&accessibility))if         (NS_FAILED(rv.call(algo)) call()) call2(1,2,3,4,5,marcus,gustavo)");
//		Matcher matcher = pattern.matcher("aOute=nsnull, no aggregation");
		
		
		// (?<=if )\((.*?)\)
		
//		 while (matcher.find()) {
//		 String result = matcher.group(0);
//		 System.out.println(result);
//		 }
		// System.out.println(list.get(0));
		// }
		//
		// }
//		Pattern pattern = Pattern.compile("(\\=).+");
//		 Matcher matcher = pattern.matcher("marcus=junior");
//		 System.out.println(matcher.find());

		// String line=" accessible/build/nsAccessibilityFactory.cpp";
		// String diff = exe("cvs diff -u -r"+a+" -r "+b+line);
		// System.out.println(diff);
		//
		// Pattern pattern = Pattern.compile("\\+(.*)|\\-(.*)");
		//
		// Matcher matcher = pattern.matcher(diff);
		//
		// while (matcher.find()) {
		// System.out.println("Entrou");
		// System.out.println(matcher.group(1));
		// System.out.println(matcher.group(2));
		// }
		// }
	}
}
// }
