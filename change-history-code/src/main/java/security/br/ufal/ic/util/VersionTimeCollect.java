package security.br.ufal.ic.util;


import java.io.IOException;
import java.security.KeyManagementException;
import java.security.NoSuchAlgorithmException;
import java.security.cert.X509Certificate;
import java.text.ParseException;

import javax.net.ssl.HostnameVerifier;
import javax.net.ssl.HttpsURLConnection;
import javax.net.ssl.SSLContext;
import javax.net.ssl.SSLSession;
import javax.net.ssl.TrustManager;
import javax.net.ssl.X509TrustManager;

import security.br.ufal.ic.kernel.KernelClassify;
import security.br.ufal.ic.kernel.ProjectDataControllerKernel;



public class VersionTimeCollect {

	private static void creatingCertificate() {
		TrustManager[] trustAllCerts = new TrustManager[] { new X509TrustManager() {
			public java.security.cert.X509Certificate[] getAcceptedIssuers() {
				return null;
			}

			public void checkClientTrusted(X509Certificate[] certs,
					String authType) {
			}

			public void checkServerTrusted(X509Certificate[] certs,
					String authType) {
			}

		} };

		SSLContext sc = null;
		try {
			sc = SSLContext.getInstance("SSL");
			sc.init(null, trustAllCerts, new java.security.SecureRandom());
		} catch (NoSuchAlgorithmException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (KeyManagementException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());

		// Create all-trusting host name verifier
		HostnameVerifier allHostsValid = new HostnameVerifier() {

			public boolean verify(String hostname, SSLSession session) {
				return true;
			}

		};
		// Install the all-trusting host verifier
		HttpsURLConnection.setDefaultHostnameVerifier(allHostsValid);

	}

	public static void main(String[] args) throws ParseException, IOException,
			InterruptedException {
		creatingCertificate();

		// Pattern pattern = Pattern
		// .compile("(commit.*)|Author:[ w]+(.*(\\<.*?\\>))|(Date:[ w]*(Thu|Fri|Mon|Sun|Sat|Tue|Wed)[ w]+(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)[ W]+(\\d\\d)[ w]+(\\d\\d\\:\\d\\d\\:\\d\\d)[ w](\\d\\d\\d\\d))");
		//
		// String test = "commit 32d107581fdb86e9e2d4c89d09d5db6d67f73b77\n"
		// + "Author: Mike Conley <mconley@mozilla.com>\n"
		// + "Date:   Thu Dec 10 17:50:23 2015 -0500";
		//
		// Matcher matcher = pattern.matcher(test);

		// while (matcher.find()) {
		// if (matcher.group(3) != null | matcher.group(4) != null
		// | matcher.group(5) != null | matcher.group(6) != null
		// | matcher.group(7) != null | matcher.group(8) != null
		// | matcher.group(9) != null) {
		// System.out.println(matcher.group(3));
		// System.out.println(matcher.group(4));
		// System.out.println(matcher.group(5));
		// System.out.println(matcher.group(6));
		// System.out.println(matcher.group(7));
		// System.out.println(matcher.group(8));
		// System.out.println(matcher.group(9));
		// }
		// }

//		SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssz");
//		Date result;
//		try {
//			result = df.parse("2015-12-10T00:10:20+0800");
//			System.out.println("date:" + result); // prints date in current
//													// locale
//			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss");
//			sdf.setTimeZone(TimeZone.getTimeZone("GMT"));
//			System.out.println(sdf.format(result)); // prints date in the format
//		} catch (DataException e) {
//			e.getMessage();
//		}
//	}


	 
		ProjectDataControllerKernel dao = new ProjectDataControllerKernel();

		for (KernelClassify kernelC : dao.getListKenelClassify()) {
//			if(kernelC.getVersion().equals("")){
//			try{
//				Document doc = Jsoup.connect(
//					"https://github.com/torvalds/linux/branch_commits/"+
//					kernelC.getCommit()).get();
//
//			Elements links = doc.select("a[href]");
//			kernelC.setVersion(links.get(links.size() - 1).text());
			
		kernelC.setDateAge(Integer.parseInt(kernelC.getDateT().split("-")[0]));
		kernelC.setDateMonth(Integer.parseInt(kernelC.getDateT().split("-")[1]));
		dao.updateKernelClassify(kernelC);
		
			//System.out.println(links.get(links.size() - 1).text());
			
//		}catch(HttpStatusException e ){
//			kernelC.setVersion("");
//			dao.updateKernelClassify(kernelC);
//			
//			continue;
//			
//		}catch (SocketTimeoutException e2) {
//			kernelC.setVersion("");
//			dao.updateKernelClassify(kernelC);
//			
//			continue;
//			// TODO: handle exception
//		}
	}
	// Elements element = doc.getElementsByAttributeValueMatching("href",
	// Pattern.compile("/torvalds/linux/releases/tag/"));
	// System.out.println(element.get(element.size() - 1).text());
	 }
}