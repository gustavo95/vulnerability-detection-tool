package security.br.ufal.ic.classification;

import java.util.regex.Matcher;
import java.util.regex.Pattern;
import security.br.ufal.ic.mozillaOLD.DiffRevision;

/**
 * <p>
 * <p>
 * <p>
 * TODO: NA verify
 * <p>
 */
public class ClassificationDataStatitics {

    private int NConditionalMissingChanges;

    private int NConditionalExtraneousChanges;

    private int NVariableMissingChanges;

    private int NVariableExtraneousChanges;

    private int NFunctionCallMissingChanges;

    private int NFunctionCallExtraneousChanges;

    private int NMethodMissingChanges;

    private int NMethodExtraneousChanges;

    private ODCClassifiers odc;

    private String method;

    private String revision;

    private Matcher matcher;
    int NCEC = 0, NCMC = 0, NFCEC = 0, NFCMC = 0, NMEC = 0, NMMC = 0, NVEC = 0, NVMC = 0;

    private String file;

    public ClassificationDataStatitics() {
        // TODO Auto-generated constructor stub
    }

    public ClassificationDataStatitics(String file, String DiffMethod, String revision, String method) {
        this.file = file;
        this.revision = revision;
        this.method = method;

        odc = new ODCClassifiers();

        Pattern pattern = Pattern.compile("\\+\\s*(.*)|\\-\\s*(.*)");

        matcher = pattern.matcher(DiffMethod);
        //Mechanism of Classification
        while (matcher.find()) {
            //Missing Classification
            if (matcher.group(1) != null) {
                if (!matcher.group(1).contains("* ") && !matcher.group(1).contains("*/")) {
                    if (odc.searchTokenConditionalStates(matcher.group(1))) {
                        this.NConditionalMissingChanges += 1;
                    } else if (odc.searchTokenFunctionCall(matcher.group(1))) {
                        this.NFunctionCallMissingChanges += 1;
                    } else if (odc.searchTokenVariable(matcher.group(1))) {
                        this.NVariableMissingChanges += 1;
                    } else if (odc.searchTokenFunction(matcher.group(1))) {
                        this.NMethodMissingChanges += 1;
                    }
                }
            }
            //Extraneous Classification
            if (matcher.group(2) != null) {
                if (!matcher.group(2).contains("* ") && !matcher.group(2).contains("/*")) {
                    if (odc.searchTokenConditionalStates(matcher.group(2))) {
                        this.NConditionalExtraneousChanges += 1;
                    } else if (odc.searchTokenFunctionCall(matcher.group(2))) {
                        this.NFunctionCallExtraneousChanges += 1;
                    } else if (odc.searchTokenVariable(matcher.group(2))) {
                        this.NVariableExtraneousChanges += 1;
                    } else if (odc.searchTokenFunction(matcher.group(2))) {
                        this.NMethodExtraneousChanges += 1;
                    }
                }
            }
        }
    }

    public String getFile() {
        return file;
    }

    public void setFile(String file) {
        this.file = file;
    }

    public String getMethod() {
        return method;
    }

    public void setMethod(String method) {
        this.method = method;
    }

    public String getRevision() {
        return revision;
    }

    public void setRevision(String revision) {
        this.revision = revision;
    }

    public int getNConditionalMissingChanges() {
        return NConditionalMissingChanges;
    }

    public void setNConditionalMissingChanges(int nConditionalMissingChanges) {
        NConditionalMissingChanges = nConditionalMissingChanges;
    }

    public int getNConditionalExtraneousChanges() {
        return NConditionalExtraneousChanges;
    }

    public void setNConditionalExtraneousChanges(int nConditionalExtraneousChanges) {
        NConditionalExtraneousChanges = nConditionalExtraneousChanges;
    }

    public int getNVariableMissingChanges() {
        return NVariableMissingChanges;
    }

    public void setNVariableMissingChanges(int nVariableMissingChanges) {
        NVariableMissingChanges = nVariableMissingChanges;
    }

    public int getNVariableExtraneousChanges() {
        return NVariableExtraneousChanges;
    }

    public void setNVariableExtraneousChanges(int nVariableExtraneousChanges) {
        NVariableExtraneousChanges = nVariableExtraneousChanges;
    }

    public int getNFunctionCallMissingChanges() {
        return NFunctionCallMissingChanges;
    }

    public void setNFunctionCallMissingChanges(int nFunctionCallMissingChanges) {
        NFunctionCallMissingChanges = nFunctionCallMissingChanges;
    }

    public int getNFunctionCallExtraneousChanges() {
        return NFunctionCallExtraneousChanges;
    }

    public void setNFunctionCallExtraneousChanges(int nFunctionCallExtraneousChanges) {
        NFunctionCallExtraneousChanges = nFunctionCallExtraneousChanges;
    }

    public int getNMethodMissingChanges() {
        return NMethodMissingChanges;
    }

    public void setNMethodMissingChanges(int nMethodMissingChanges) {
        NMethodMissingChanges = nMethodMissingChanges;
    }

    public int getNMethodExtraneousChanges() {
        return NMethodExtraneousChanges;
    }

    public void setNMethodExtraneousChanges(int nMethodExtraneousChanges) {
        NMethodExtraneousChanges = nMethodExtraneousChanges;
    }

    public ODCClassifiers getOdc() {
        return odc;
    }

    public void setOdc(ODCClassifiers odc) {
        this.odc = odc;
    }

    public Matcher getMatcher() {
        return matcher;
    }

    public void setMatcher(Matcher matcher) {
        this.matcher = matcher;
    }

    public int getNCEC() {
        return NCEC;
    }

    public void setNCEC(int nCEC) {
        NCEC = nCEC;
    }

    public int getNCMC() {
        return NCMC;
    }

    public void setNCMC(int nCMC) {
        NCMC = nCMC;
    }

    public int getNFCEC() {
        return NFCEC;
    }

    public void setNFCEC(int nFCEC) {
        NFCEC = nFCEC;
    }

    public int getNFCMC() {
        return NFCMC;
    }

    public void setNFCMC(int nFCMC) {
        NFCMC = nFCMC;
    }

    public int getNMEC() {
        return NMEC;
    }

    public void setNMEC(int nMEC) {
        NMEC = nMEC;
    }

    public int getNMMC() {
        return NMMC;
    }

    public void setNMMC(int nMMC) {
        NMMC = nMMC;
    }

    public int getNVEC() {
        return NVEC;
    }

    public void setNVEC(int nVEC) {
        NVEC = nVEC;
    }

    public int getNVMC() {
        return NVMC;
    }

    public void setNVMC(int nVMC) {
        NVMC = nVMC;
    }

    public static void main(String[] args) {
        ClassificationDataStatitics classi = new ClassificationDataStatitics("",
                DiffRevision
                .exe("git diff e51db73532955dc5eaba4235e62b74b460709d5b 41301ae78a99ead04ea42672a1ab72c6f44cc81d fs/namespace.c").split("@@ -")[14],
                "", "static void ext4_orphan_cleanup(");
        System.out.println(DiffRevision.exe("git diff e51db73532955dc5eaba4235e62b74b460709d5b 41301ae78a99ead04ea42672a1ab72c6f44cc81d fs/namespace.c").split("@@ -")[14]);
//		System.out.println("File:  " + classi.getFile());
//		System.out.println("Method:  " + classi.getMethod());
//		System.out.println("Revision:  " + classi.getRevision());

        System.out.println("NumberExtraneous Conditional:   " + classi.getNConditionalExtraneousChanges());
        System.out.println("Number Missing Conditional:   " + classi.getNConditionalMissingChanges());
        System.out.println("Number Extraneous Function Call:   " + classi.getNFunctionCallExtraneousChanges());
        System.out.println("Number missing Function Call:   " + classi.getNFunctionCallMissingChanges());
        System.out.println("Number Extraneous Variable:   " + classi.getNVariableExtraneousChanges());
        System.out.println("Number Missing Variable:   " + classi.getNVariableMissingChanges());
        System.out.println("Number Extraneous Method :   " + classi.getNMethodExtraneousChanges());
        System.out.println("Number Missing Method:   " + classi.getNMethodMissingChanges());
    }
}
