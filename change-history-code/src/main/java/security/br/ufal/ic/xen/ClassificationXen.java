package security.br.ufal.ic.xen;

import java.util.ArrayList;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import security.br.ufal.ic.classification.ClassificationDataStatitics;

public class ClassificationXen {

    public static void main(String[] args) {
        ProjectXenDAOCOntroller dao = new ProjectXenDAOCOntroller();
        List<FunctionsAndFilePatcherXen> list = dao.getListFunction();
        XenDataCodeChurn xenDataCodeChurn;
        String function = "";
        int NCEC = 0, NCMC = 0, NFCEC = 0, NFCMC = 0, NMEC = 0, NMMC = 0, NVEC = 0, NVMC = 0;

        // compilar apenas uma vez, para minimizar overhead
        final Pattern pattern = Pattern.compile("(commit)\\s*(.*)");
        final Pattern patternFunction = Pattern.compile("@@(\\s+)(\\w+\\n?.*\\()");

        for (FunctionsAndFilePatcherXen xenObject : list) {

            ArrayList<String> listCommits = new ArrayList<String>();
            String a = ColectCommitsXen.executarComando("git log " + xenObject.getFile());

            Matcher matcher = pattern.matcher(a);
            while (matcher.find()) {
                if (matcher.group(2).length() == 40) {
                    listCommits.add(matcher.group(2));
                }
            }
            for (int i = listCommits.size() - 1; i > 0; i--) {
                if (listCommits.get(i).equals(xenObject.getCommitBefore())) {
                    break;
                }
                String[] diff = {};
                ClassificationDataStatitics classify = null;
                XenClassify xenClassify = null;
                diff = ColectCommitsXen.executarComando(
                        "git diff " + listCommits.get(i) + " " + listCommits.get(i - 1) + " " + xenObject.getFile())
                        .split("(?<=@@ -)");
//				.split("(?<=@@ -)(\\w+[^return]\\s\\w+\\()");
                for (String s : diff) {

                    Matcher matcherFunction = patternFunction.matcher(s);
                    //TODO:MP Cheira-me a bug. matcher errado?
                    // o matcher nao era usado
                    while (matcher.find()) {
                        function = matcher.group(2);
                    }
//					
                    if (!s.contains(xenObject.getFunction())) {
                        classify = new ClassificationDataStatitics(xenObject.getFile(), s, listCommits.get(i - 1),
                                xenObject.getFunction());
                        xenClassify = new XenClassify();
                        xenClassify.setCommit(listCommits.get(i - 1));
                        xenClassify.setFile(xenObject.getFile());
                        xenClassify.setFunction(xenObject.getFunction());
                        xenClassify.setVulnerabilityID(xenObject.getPatch());
                        xenClassify.setPatch(false);
                        xenClassify.setNConditionalExtraneousChanges(classify.getNConditionalExtraneousChanges());
                        NCEC += classify.getNConditionalExtraneousChanges();
                        xenClassify.setNConditionalMissingChanges(classify.getNConditionalMissingChanges());
                        NCMC += classify.getNConditionalMissingChanges();
                        xenClassify.setNFunctionCallExtraneousChanges(classify.getNFunctionCallExtraneousChanges());
                        NFCEC += classify.getNFunctionCallExtraneousChanges();
                        xenClassify.setNFunctionCallMissingChanges(classify.getNFunctionCallMissingChanges());
                        NFCMC += classify.getNFunctionCallMissingChanges();
                        xenClassify.setNMethodExtraneousChanges(classify.getNMethodExtraneousChanges());
                        NMEC += classify.getNMethodExtraneousChanges();
                        xenClassify.setNMethodMissingChanges(classify.getNMethodMissingChanges());
                        NMMC += classify.getNMethodMissingChanges();

                        xenClassify.setNVariableExtraneousChanges(classify.getNVariableExtraneousChanges());
                        NVEC += classify.getNVariableExtraneousChanges();
                        xenClassify.setNVariableMissingChanges(classify.getNVariableMissingChanges());
                        NVMC += classify.getNVariableMissingChanges();
                        dao.addInstace(xenClassify);
                    }

                }

            }
            xenDataCodeChurn = new XenDataCodeChurn();
            xenDataCodeChurn.setCommit(xenObject.getCommitBefore());
            xenDataCodeChurn.setFile(xenObject.getFile());
            xenDataCodeChurn.setFunction(function);
            xenDataCodeChurn.setVulnerabilityID(xenObject.getPatch());
            xenDataCodeChurn.setPatch(false);
            xenDataCodeChurn.setNConditionalExtraneousChanges(NCEC);
            xenDataCodeChurn.setNConditionalMissingChanges(NCMC);
            xenDataCodeChurn.setNFunctionCallExtraneousChanges(NFCEC);
            xenDataCodeChurn.setNFunctionCallMissingChanges(NFCMC);
            xenDataCodeChurn.setNMethodExtraneousChanges(NMEC);
            xenDataCodeChurn.setNMethodMissingChanges(NMMC);
            xenDataCodeChurn.setNVariableExtraneousChanges(NVEC);
            xenDataCodeChurn.setNVariableMissingChanges(NVMC);
            dao.addInstace(xenDataCodeChurn);
            NCEC = 0;
            NCMC = 0;
            NFCEC = 0;
            NFCMC = 0;
            NMEC = 0;
            NMMC = 0;
            NVEC = 0;
            NVMC = 0;
        }
    }
}
