package security.br.ufal.ic.util;

import java.util.HashMap;
import java.util.Map;

import org.eclipse.cdt.core.dom.ast.ASTVisitor;
import org.eclipse.cdt.core.dom.ast.IASTDeclarator;
import org.eclipse.cdt.core.dom.ast.IASTNode;
import org.eclipse.cdt.core.dom.ast.IASTStatement;
import org.eclipse.cdt.core.dom.ast.IASTTranslationUnit;
import org.eclipse.cdt.core.dom.ast.gnu.cpp.GPPLanguage;
import org.eclipse.cdt.core.parser.DefaultLogService;
import org.eclipse.cdt.core.parser.FileContent;
import org.eclipse.cdt.core.parser.IParserLogService;
import org.eclipse.cdt.core.parser.IScannerInfo;
import org.eclipse.cdt.core.parser.IncludeFileContentProvider;
import org.eclipse.cdt.core.parser.ScannerInfo;
import org.eclipse.cdt.internal.core.dom.parser.cpp.CPPASTDeclarator;
import org.eclipse.cdt.internal.core.dom.parser.cpp.CPPASTExpressionStatement;
import org.eclipse.cdt.internal.core.dom.parser.cpp.CPPASTFunctionDeclarator;
import org.eclipse.cdt.internal.core.dom.parser.cpp.CPPASTFunctionDefinition;
import org.eclipse.cdt.internal.core.dom.parser.cpp.CPPASTIfStatement;
import org.eclipse.core.runtime.CoreException;

import security.br.ufal.ic.xen.ProjectXenDAOCOntroller;
import security.br.ufal.ic.xen.XenClassifyNewApproach;
import security.br.ufal.ic.xen.XenSetLineChanges;

public class CollectStructureAST {


	public static void main(String[] args) throws CoreException {


		ProjectXenDAOCOntroller dao = new ProjectXenDAOCOntroller();

		for (XenSetLineChanges xenObject : dao.getListXenSetLines()) {
			String path = "/Users/pianco/Documents/tempFile";
			if (xenObject.getFile().endsWith(".c")) {
				path += ".c";
			} else if (xenObject.getFile().endsWith(".cpp")) {
				path += ".cpp";
			} else if (xenObject.getFile().endsWith(".h")) {
				path += ".h";
			}

			// System.out.println("git show " + kernelObject.getCommit() +":"+
			// kernelObject.getFile() + " >> " + path);

			Utils.FileWrite(path,Utils.execueCommand("git show " + xenObject.getCommit() + ":" + xenObject.getFile()));

			FileContent fileContent = FileContent.createForExternalFileLocation(path);

			// System.out.println(fileContent.getFileLocation());

			for (String i : xenObject.getLines_Changed_add().split(",")) {
				XenClassifyNewApproach xenClassify = new XenClassifyNewApproach();
				System.out.println(i);
				if(i.equals("")||i.equals("@@@")){
					break;
				}

				int line = Integer.parseInt(i);

				Map<String, String> definedSymbols = new HashMap<String, String>();
				String[] includePaths = new String[0];
				IScannerInfo info = new ScannerInfo(definedSymbols, includePaths);
				IParserLogService log = new DefaultLogService();

				IncludeFileContentProvider emptyIncludes = IncludeFileContentProvider.getEmptyFilesProvider();

				int opts = 8;
				IASTTranslationUnit translationUnit = GPPLanguage.getDefault().getASTTranslationUnit(fileContent, info,
						emptyIncludes, null, opts, log);

				ASTVisitor visitor = new ASTVisitor(true) {

					public int visit(IASTDeclarator decl) {

						if (line == decl.getFileLocation().getStartingLineNumber()
								&& decl instanceof CPPASTFunctionDeclarator) {
							// System.out.println(decl.getClass().getSimpleName());
							xenClassify.setCommit(xenObject.getCommit());
							xenClassify.setFile(xenObject.getFile());
							xenClassify.setFunc(decl.getRawSignature());
							xenClassify.setTypeOfStructure(ODCStructures.FunctionD);
							xenClassify.setCVEID(xenObject.getV_id());
							xenClassify.setTypeofChange("+");
							xenClassify.setP_ID(xenObject.getP_id());
							dao.addInstaceXenClassifyNewApproach(xenClassify);

						} else if (line - 1 == decl.getFileLocation().getStartingLineNumber()
								&& decl instanceof CPPASTFunctionDeclarator) {
							// System.out.println(decl.getClass().getSimpleName());
							xenClassify.setCommit(xenObject.getCommit());
							xenClassify.setFile(xenObject.getFile());
							xenClassify.setFunc(decl.getRawSignature());
							xenClassify.setTypeOfStructure(ODCStructures.FunctionD);
							xenClassify.setCVEID(xenObject.getV_id());
							xenClassify.setTypeofChange("+");
							xenClassify.setP_ID(xenObject.getP_id());
							dao.addInstaceXenClassifyNewApproach(xenClassify);


						}
						if (line == decl.getFileLocation().getStartingLineNumber() && decl instanceof CPPASTDeclarator
								&& decl.getRawSignature().contains("=")
								&& !decl.getRawSignature().matches("for.*?\\(")) {

							// System.out.println(decl.getRawSignature());
							// System.out.println(line);
							// System.out.println(decl.getClass().getSimpleName());
							// System.out.println(1);

							IASTNode temp = decl;
							while (temp.getParent() != null) {
								if (temp.getClass() == CPPASTFunctionDefinition.class) {
									for (int i = 0; i < temp.getChildren().length; i++) {
										if (temp.getChildren()[i].getClass() == CPPASTFunctionDeclarator.class) {
											// System.out.println(temp.getChildren()[i].getRawSignature());
											xenClassify.setCommit(xenObject.getCommit());
											xenClassify.setFile(xenObject.getFile());
											xenClassify.setFunc(temp.getChildren()[i].getRawSignature());
											xenClassify.setTypeOfStructure(ODCStructures.Variable);
											xenClassify.setCVEID(xenObject.getV_id());
											xenClassify.setTypeofChange("+");
											xenClassify.setP_ID(xenObject.getP_id());
											dao.addInstaceXenClassifyNewApproach(xenClassify);


											break;
										}
									}
								}

								temp = temp.getParent();

							}

						}
						return PROCESS_CONTINUE;

					}

					public int visit(IASTStatement stmt) {
						String sig = stmt.getRawSignature();
						if (sig.length() > 0) {
							if (line == stmt.getFileLocation().getStartingLineNumber()
									&& stmt.getClass() == CPPASTIfStatement.class) {

								// System.out.println(line);
								// System.out.println(stmt.getClass().getSimpleName());

								IASTNode temp = stmt;

								while (temp.getParent() != null) {
									if (temp.getClass() == CPPASTFunctionDefinition.class) {
										for (int i = 0; i < temp.getChildren().length; i++) {
											if (temp.getChildren()[i].getClass() == CPPASTFunctionDeclarator.class) {
												// System.out.println(temp.getChildren()[i].getRawSignature().replace("\n",
												// "")
												// .replaceAll(" {2,}", ""));
												xenClassify.setCommit(xenObject.getCommit());
												xenClassify.setFile(xenObject.getFile());
												xenClassify.setFunc(temp.getChildren()[i].getRawSignature()
														.replace("\n", "").replaceAll(" {2,}", ""));
												xenClassify.setTypeOfStructure(ODCStructures.ConditionalStatment);
												xenClassify.setCVEID(xenObject.getV_id());
												xenClassify.setTypeofChange("+");
												xenClassify.setP_ID(xenObject.getP_id());
												dao.addInstaceXenClassifyNewApproach(xenClassify);


												break;
											}
										}
									}

									temp = temp.getParent();

								}

							}

							if (line == stmt.getFileLocation().getStartingLineNumber()
									&& stmt.getClass() == CPPASTExpressionStatement.class
									&& !stmt.getRawSignature().matches(".*={1}.*?")) {
								// System.out.println(line);
								// System.out.println(stmt.getClass().getSimpleName());

								IASTNode temp = stmt;

								while (temp.getParent() != null) {
									if (temp.getClass() == CPPASTFunctionDefinition.class) {
										for (int i = 0; i < temp.getChildren().length; i++) {
											if (temp.getChildren()[i].getClass() == CPPASTFunctionDeclarator.class) {
												// System.out.println(temp.getChildren()[i].getRawSignature());
												xenClassify.setCommit(xenObject.getCommit());
												xenClassify.setFile(xenObject.getFile());
												xenClassify.setFunc(temp.getChildren()[i].getRawSignature()
														.replace("\n", "").replaceAll(" {2,}", ""));
												xenClassify.setTypeOfStructure(ODCStructures.FunctionCall);
												xenClassify.setCVEID(xenObject.getV_id());
												xenClassify.setTypeofChange("+");
												xenClassify.setP_ID(xenObject.getP_id());
												dao.addInstaceXenClassifyNewApproach(xenClassify);


												break;
											}
										}
									}

									temp = temp.getParent();

								}

							} else if (line == stmt.getFileLocation().getStartingLineNumber()
									&& stmt.getClass() == CPPASTExpressionStatement.class
									&& !stmt.getRawSignature().contains("=")) {
								IASTNode temp = stmt;
								// functioncall
								// System.out.println(line);
								// System.out.println(stmt.getClass().getSimpleName());

								while (temp.getParent() != null) {
									if (temp.getClass() == CPPASTFunctionDefinition.class) {
										for (int i = 0; i < temp.getChildren().length; i++) {
											if (temp.getChildren()[i].getClass() == CPPASTFunctionDeclarator.class) {
												// System.out.println(temp.getChildren()[i].getRawSignature());
												xenClassify.setCommit(xenObject.getCommit());
												xenClassify.setFile(xenObject.getFile());
												xenClassify.setFunc(temp.getChildren()[i].getRawSignature()
														.replace("\n", "").replaceAll(" {2,}", ""));
												xenClassify.setTypeOfStructure(ODCStructures.FunctionCall);
												xenClassify.setCVEID(xenObject.getV_id());
												xenClassify.setTypeofChange("+");
												xenClassify.setP_ID(xenObject.getP_id());
												dao.addInstaceXenClassifyNewApproach(xenClassify);


												break;
											}
										}
									}

									temp = temp.getParent();
								}
							} else if (line == stmt.getFileLocation().getStartingLineNumber()
									&& stmt.getClass() == CPPASTExpressionStatement.class
									&& stmt.getRawSignature().contains("=")) {
								IASTNode temp = stmt;
								// System.out.println(line);
								// System.out.println(stmt.getClass().getSimpleName()
								// + " Variable");

								while (temp.getParent() != null) {
									if (temp.getClass() == CPPASTFunctionDefinition.class) {
										for (int i = 0; i < temp.getChildren().length; i++) {
											if (temp.getChildren()[i].getClass() == CPPASTFunctionDeclarator.class) {

												// System.out.println(temp.getChildren()[i].getRawSignature());
												xenClassify.setCommit(xenObject.getCommit());
												xenClassify.setFile(xenObject.getFile());
												xenClassify.setFunc(temp.getChildren()[i].getRawSignature()
														.replace("\n", "").replaceAll(" {2,}", ""));
												xenClassify.setTypeOfStructure(ODCStructures.Variable);
												xenClassify.setCVEID(xenObject.getV_id());
												xenClassify.setTypeofChange("+");
												xenClassify.setP_ID(xenObject.getP_id());
												dao.addInstaceXenClassifyNewApproach(xenClassify);


												break;
											}
										}
									}

									temp = temp.getParent();
								}
							}

						}
						return PROCESS_CONTINUE;
					}

				};

				translationUnit.accept(visitor);

			}
			

		}
	}
}
