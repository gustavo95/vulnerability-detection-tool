package security.br.ufal.ic.util;
import java.util.HashMap;
import java.util.Map;

import org.eclipse.cdt.core.dom.ast.ASTVisitor;
import org.eclipse.cdt.core.dom.ast.IASTDeclarator;
import org.eclipse.cdt.core.dom.ast.IASTName;
import org.eclipse.cdt.core.dom.ast.IASTNode;
import org.eclipse.cdt.core.dom.ast.IASTStatement;
import org.eclipse.cdt.core.dom.ast.IASTTranslationUnit;
import org.eclipse.cdt.core.dom.ast.gnu.cpp.GPPLanguage;
import org.eclipse.cdt.core.parser.DefaultLogService;
import org.eclipse.cdt.core.parser.FileContent;
import org.eclipse.cdt.core.parser.IParserLogService;
import org.eclipse.cdt.core.parser.IScannerInfo;
import org.eclipse.cdt.core.parser.IncludeFileContentProvider;
import org.eclipse.cdt.core.parser.ScannerInfo;
import org.eclipse.cdt.internal.core.dom.parser.cpp.CPPASTDeclarator;
import org.eclipse.cdt.internal.core.dom.parser.cpp.CPPASTExpressionStatement;
import org.eclipse.cdt.internal.core.dom.parser.cpp.CPPASTFunctionDeclarator;
import org.eclipse.cdt.internal.core.dom.parser.cpp.CPPASTFunctionDefinition;
import org.eclipse.cdt.internal.core.dom.parser.cpp.CPPASTIfStatement;
import org.eclipse.core.runtime.CoreException;

public class CollectStructureAST {

	public static void main(String[] args) throws CoreException {
		parse("/Users/pianco/Documents/Master Graduate/Change History/Repository/security-change-history/change-history-code/src/main/java/security/br/ufal/ic/util/tempFile.c");
	}

	//Parser to identify structures and generate ASt
	public static void parse(String tempFile) throws CoreException {
		FileContent fileContent = FileContent.createForExternalFileLocation(tempFile);

		int line = 1150;

		Map<String, String> definedSymbols = new HashMap<String, String>();
		String[] includePaths = new String[0];
		IScannerInfo info = new ScannerInfo(definedSymbols, includePaths);
		IParserLogService log = new DefaultLogService();

		IncludeFileContentProvider emptyIncludes = IncludeFileContentProvider.getEmptyFilesProvider();

		int opts = 8;
		IASTTranslationUnit translationUnit = GPPLanguage.getDefault().getASTTranslationUnit(fileContent, info,
				emptyIncludes, null, opts, log);

		for (IASTNode node : translationUnit.getChildren()) {
			if (node.getFileLocation().getStartingLineNumber() == 150) {
				System.out.println(node);
			}
		}
		
		ASTVisitor visitor = new ASTVisitor(true) {
			public int visit(IASTName name) {
				String prtName = name.toString();
				if (prtName.length() == 0) {
					prtName = name.getRawSignature();
				}

				return PROCESS_CONTINUE;
			}

			public int visit(IASTDeclarator decl) {

				if (line == decl.getFileLocation().getStartingLineNumber()
						&& decl instanceof CPPASTFunctionDeclarator) {
					System.out.println(decl.getClass().getSimpleName());

				}
				if (line == decl.getFileLocation().getStartingLineNumber() && decl instanceof CPPASTDeclarator
						&& decl.getRawSignature().contains("=")) {
					System.out.println(decl.getClass().getSimpleName());
					IASTNode temp = decl;
					while (temp.getParent() != null) {
						if (temp.getClass() == CPPASTFunctionDefinition.class) {
							for (int i = 0; i < temp.getChildren().length; i++) {
								if (temp.getChildren()[i].getClass() == CPPASTFunctionDeclarator.class) {
									System.out.println(temp.getChildren()[i].getRawSignature());
									break;
								}
							}
						}

						temp = temp.getParent();

					}

				}
				return PROCESS_CONTINUE;

			}

			public int visit(IASTStatement stmt) { // lots more
				String sig = stmt.getRawSignature();
				if (sig.length() > 0) {
					if (line == stmt.getFileLocation().getStartingLineNumber()
							&& stmt.getClass() == CPPASTIfStatement.class) {
						System.out.println(stmt.getClass().getSimpleName());
						IASTNode temp = stmt;

						while (temp.getParent() != null) {
							if (temp.getClass() == CPPASTFunctionDefinition.class) {
								for (int i = 0; i < temp.getChildren().length; i++) {
									if (temp.getChildren()[i].getClass() == CPPASTFunctionDeclarator.class) {
										System.out.println(temp.getChildren()[i].getRawSignature().replace("\n", "").replaceAll(" {2,}", ""));
										break;
									}
								}
							}

							temp = temp.getParent();

						}

					}

					if (line == stmt.getFileLocation().getStartingLineNumber()
							&& stmt.getClass() == CPPASTExpressionStatement.class
							&& !stmt.getRawSignature().matches(".*={1}.*?")) {
						System.out.println(stmt.getClass().getSimpleName());
						IASTNode temp = stmt;

						while (temp.getParent() != null) {
							if (temp.getClass() == CPPASTFunctionDefinition.class) {
								for (int i = 0; i < temp.getChildren().length; i++) {
									if (temp.getChildren()[i].getClass() == CPPASTFunctionDeclarator.class) {
										System.out.println(temp.getChildren()[i].getRawSignature());
										break;
									}
								}
							}

							temp = temp.getParent();

						}

					} else if (line == stmt.getFileLocation().getStartingLineNumber()
							&& stmt.getClass() == CPPASTExpressionStatement.class) {
						System.out.println(stmt.getClass().getSimpleName() + "Variable Atc");
						IASTNode temp = stmt;

						while (temp.getParent() != null) {
							if (temp.getClass() == CPPASTFunctionDefinition.class) {
								for (int i = 0; i < temp.getChildren().length; i++) {
									if (temp.getChildren()[i].getClass() == CPPASTFunctionDeclarator.class) {
										System.out.println(temp.getChildren()[i].getRawSignature());
										break;
									}
								}
							}

							temp = temp.getParent();
						}
					}

				}
				return PROCESS_CONTINUE;
			}

		};

		translationUnit.accept(visitor);

	}
}
