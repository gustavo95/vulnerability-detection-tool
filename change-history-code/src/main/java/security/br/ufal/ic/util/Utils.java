package security.br.ufal.ic.util;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class Utils {

	public static void FileWrite(String fileName, String content) {

		File file = new File(fileName);

		try (FileOutputStream fop = new FileOutputStream(file)) {

			// if file doesn't exists, then create it
			if (!file.exists()) {
				file.createNewFile();
			}

			// get the content in bytes
			byte[] contentInBytes = content.getBytes();

			fop.write(contentInBytes);
			fop.flush();
			fop.close();

			System.out.println("Done");

		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	public static String execueCommand(String comando) {

		Process process = null;
		try {
			process = Runtime.getRuntime().exec(comando);
		} catch (IOException e) {
			e.printStackTrace();
		}

		InputStream inputStream = process.getInputStream();

		String saida = "";

		{
			int n;

			try {
				while ((n = inputStream.read()) != -1) {
					saida += (char) n;
				}
			} catch (IOException e) {
				e.printStackTrace();
			}
		}

		return saida + "\n";
	}

	static Set<String> getIntervalLinesChangedMinus(String diff, String commit) {
		commit = commit + "^";
		Set<String> intervalLines = new LinkedHashSet<>();
		String[] gitdiff = diff.split("\n");
		int intLine = 0;
		int endline = 0;
		for (String line : gitdiff) {
			endline++;
			if (commit.contains("^")) {
				if (line.startsWith("+"))
					endline--;
			} else {
				if (line.startsWith("-"))
					endline--;
			}
			if (line.matches("@@.*@@.*|diff --git.*")) {
				if (line.contains("@@")) {
					if (intLine != 0)
						intervalLines.add((intLine + 3) + "-" + (endline - 4));
					if (commit.contains("^")) {
						line = line.replaceAll("@@", "").replaceAll(" ", "").split("[+]")[0].split(",")[0]
								.split("[-]")[1];
						intLine = Integer.parseInt(line);
						endline = intLine;
					} else {
						line = line.replaceAll("@@", "").replaceAll(" ", "").split("[+]")[1];
						line = line.split(",")[0];
						intLine = Integer.parseInt(line);
						endline = intLine;
					}
				} else if (line.contains("diff --git")) {
					if (intLine != 0)
						intervalLines.add((intLine + 3) + "-" + (endline - 4));
					endline = 0;
				}
			}
		}
		if (intLine != 0)
			intervalLines.add((intLine + 3) + "-" + (endline - 4));

		return intervalLines;
	}

	static Set<String> getIntervalLinesChangedAdd(String diff, String commit) {
		Set<String> intervalLines = new LinkedHashSet<>();
		String[] gitdiff = diff.split("\n");
		int intLine = 0;
		int endline = 0;
		for (String line : gitdiff) {
			endline++;
			if (commit.contains("^")) {
				if (line.startsWith("+"))
					endline--;
			} else {
				if (line.startsWith("-"))
					endline--;
			}
			if (line.matches("@@.*@@.*|diff --git.*")) {
				if (line.contains("@@")) {
					if (intLine != 0)
						intervalLines.add((intLine + 3) + "-" + (endline - 4));
					if (commit.contains("^")) {
						line = line.replaceAll("@@", "").replaceAll(" ", "").split("[+]")[0].split(",")[0]
								.split("[-]")[1];
						intLine = Integer.parseInt(line);
						endline = intLine;
					} else {
						line = line.replaceAll("@@", "").replaceAll(" ", "").split("[+]")[1];
						line = line.split(",")[0];
						intLine = Integer.parseInt(line);
						endline = intLine;
					}
				} else if (line.contains("diff --git")) {
					if (intLine != 0)
						intervalLines.add((intLine + 3) + "-" + (endline - 4));
					endline = 0;
				}
			}
		}
		if (intLine != 0)
			intervalLines.add((intLine + 3) + "-" + (endline - 4));// +3 and -4
																	// for
																	// interval

		return intervalLines;
	}

	public static ArrayList<Set<String>> getSetLineNumerAdd(String commit, String file) {

		List<String> changesadd = new ArrayList<String>();
		Set<String> changesaddLine = new LinkedHashSet<String>();
		Pattern pattern = Pattern.compile("^(\\+)(.*)");
		int menor;
		int maior;
		ArrayList<Set<String>> temp = new ArrayList<Set<String>>();
		String diff = Utils.execueCommand("git show " + commit + " -- " + file);
		System.out.println("git show " + commit + " -- " + file);
		if (Utils.getIntervalLinesChangedAdd(diff, commit).size() != 0 && !diff.contains("@@@")) {

			ArrayList<String> listIntervals = new ArrayList<String>();
			for (String s : Utils.getIntervalLinesChangedAdd(diff, commit)) {
				System.out.println(s);
				listIntervals.add(s);
			}
			for (int i = 0; i < listIntervals.size(); i++) {
				String[] aux = listIntervals.get(i).split("-");
				menor = Integer.parseInt(aux[0]);
				maior = Integer.parseInt(aux[1]);

				String s2 = diff.split("@@ -.*?\\,[\\d]+ @.*")[i + 1];

				for (String stringfinder : s2.split("\n")) {
					if (stringfinder.startsWith("+")) {
						Matcher matcher = pattern.matcher(stringfinder);
						matcher.find();
						changesadd.add(matcher.group(2));
					}
				}
				for (Iterator<String> iterator = changesadd.iterator(); iterator.hasNext();) {
					String value = iterator.next();
					if (value.replace("\t", "").replace(" ", "").length() <= 3) {
						iterator.remove();
					}
				}
				String[] setFileToAddvedAnalysis = Utils.execueCommand("git show " + commit + ":" + file).split("\n");
				for (String auxiliar : changesadd) {
					for (int inter = menor - 1; inter < maior; inter++) {
						if (setFileToAddvedAnalysis[inter].equals((auxiliar))) {

							changesaddLine.add(String.valueOf(inter + 1));
						}
					}
				}

				temp.add(changesaddLine);
			}
		} else {
			if (diff.contains("@@@")) {
				changesaddLine.add("@@@");
			} else {
				changesaddLine.add("");
			}
			temp.add(changesaddLine);
		}
		return temp;

	}

	public static ArrayList<Set<String>> getSetLineNumerRemoved(String commit, String file) {

		List<String> changesaREmoved = new ArrayList<String>();
		Set<String> changesLineRemoved = new LinkedHashSet<String>();
		Pattern pattern = Pattern.compile("^(\\-)(.*)");
		int menor;
		int maior;

		ArrayList<Set<String>> temp = new ArrayList<Set<String>>();
		String diff = Utils.execueCommand("git show " + commit + " -- " + file);

		System.out.println("git show " + commit + " -- " + file);

		ArrayList<String> listIntervals = new ArrayList<String>();

		if (Utils.getIntervalLinesChangedMinus(diff, commit).size() != 0 && !diff.contains("@@@")) {
			System.out.println(0);

			for (String s : Utils.getIntervalLinesChangedMinus(diff, commit)) {
				listIntervals.add(s);
			}

			for (int i = 0; i < listIntervals.size(); i++) {

				String[] aux = listIntervals.get(i).split("-");
				menor = Integer.parseInt(aux[0]);
				maior = Integer.parseInt(aux[1]);

				String s2 = diff.split("@@ -.*?\\,[\\d]+ @.*")[i + 1];

				for (String stringfinder : s2.split("\n")) {
					if (stringfinder.startsWith("-")) {
						Matcher matcher = pattern.matcher(stringfinder);
						matcher.find();
						changesaREmoved.add(matcher.group(2));
					}
				}
				for (Iterator<String> iterator = changesaREmoved.iterator(); iterator.hasNext();) {
					String value = iterator.next();
					if (value.replace("\t", "").replace(" ", "").length() <= 3) {
						iterator.remove();
					}
				}

				String[] setFileToRemoveddAnalysis = Utils.execueCommand("git show " + commit + "^:" + file)
						.split("\n");
				for (String auxiliar : changesaREmoved) {
					for (int inter = menor - 1; inter <= maior; inter++) {
						if (setFileToRemoveddAnalysis[inter].equals((auxiliar))) {

							changesLineRemoved.add(String.valueOf(inter + 1));
						}
					}
				}

				temp.add(changesLineRemoved);
			}

		} else {
			//System.out.println(1);
			if (diff.contains("@@@")) {
				changesLineRemoved.add("@@@");
			} else {
				changesLineRemoved.add("");
			}
			temp.add(changesLineRemoved);
		}
		return temp;

	}

	// public static void main(String[] args) {
	//
	// ArrayList<Set<String>> temp = getSetLineNumerAdd(
	// "b965b31a6bce8c37e67e525fae6da0e2f26d6b2e",
	// "xen/arch/x86/mm.c");
	//
	// System.out.println(temp.get(0));
	//
	// System.out.println(Utils.execueCommand("git show
	// b965b31a6bce8c37e67e525fae6da0e2f26d6b2e "
	// + "xen/arch/x86/mm.c"));
	//
	// }
}
