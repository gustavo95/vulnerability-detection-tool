package security.br.ufal.ic.util;

import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class Utils {

	public static String execueCommand(String comando) {

		Process process = null;
		try {
			process = Runtime.getRuntime().exec(comando);
		} catch (IOException e) {
			e.printStackTrace();
		}

		InputStream inputStream = process.getInputStream();

		String saida = "";

		{
			int n;

			try {
				while ((n = inputStream.read()) != -1) {
					saida += (char) n;
				}
			} catch (IOException e) {
				e.printStackTrace();
			}
		}

		return saida + "\n";
	}

	public static Set<String> getIntervalLinesChanged(String diff, String commit) {
		Set<String> intervalLines = new LinkedHashSet<>();
		String[] gitdiff = diff.split("\\n");
		int intLine = 0;
		int endline = 0;
		for (String line : gitdiff) {
			endline++;
			if (commit.contains("^")) {
				if (line.startsWith("+"))
					endline--;
			} else {
				if (line.startsWith("-"))
					endline--;
			}
			if (line.matches("@@.*@@.*|diff --git.*")) {

				if (line.contains("@@")) {
					if (intLine != 0)
						intervalLines.add((intLine + 3) + "-" + (endline - 5));
					if (commit.contains("^")) {
						line = line.replaceAll("@@", "").replaceAll(" ", "")
								.split("[+]")[0].split(",")[0].split("[-]")[1];
						intLine = Integer.parseInt(line);
						endline = intLine;
					} else {
						line = line.replaceAll("@@", "").replaceAll(" ", "")
								.split("[+]")[1];
						line = line.split(",")[0];
						intLine = Integer.parseInt(line);
						endline = intLine;
					}
				} else if (line.contains("diff --git")) {
					if (intLine != 0)
						intervalLines.add((intLine + 3) + "-" + (endline - 4));
					endline = 0;
				}
			}
		}
		if (intLine != 0)
			intervalLines.add((intLine + 3) + "-" + (endline - 4));// +3 and -4
																	// for
																	// interval
																	// from git
		return intervalLines;
	}

	public static ArrayList<Set<String>> getSetLineNumer(String commit,
			String file) {

		List<String> changesRemoved = new ArrayList<String>();
		List<String> changesadd = new ArrayList<String>();
		Set<String> changesRemovedLine = new LinkedHashSet<String>();
		Set<String> changesaddLine = new LinkedHashSet<String>();
		Pattern pattern = Pattern.compile("^(\\-|\\+)(.*)");
		//Pattern pattern2 = Pattern.compile("^(\\-)(.*)");
		//Pattern pattern3 = Pattern.compile("^(\\-)(.*)");
		int menor;
		int maior;

		ArrayList<Set<String>> temp = new ArrayList<Set<String>>();

		String diff = Utils.execueCommand("git show " + commit + " -- " + file);
		ArrayList<String> listIntervals = new ArrayList<String>();
		for (String s : Utils.getIntervalLinesChanged(diff, commit)) {
			listIntervals.add(s);

		}

		for (int i = 0; i < listIntervals.size(); i++) {

			String[] aux = listIntervals.get(i).split("-");
			menor = Integer.parseInt(aux[0]);
			maior = Integer.parseInt(aux[1]);
			if (menor > maior) {
				int temps = menor;
				menor = maior;
				maior = temps;
			}
			if(menor==maior){
				changesaddLine.add(String.valueOf(menor));
				changesRemovedLine.add(String.valueOf(menor));
			}

			boolean haveMore = false;
			boolean haveMenus = false;


			String s2 = diff.split("@@ -")[i+1];

			for (String stringfinder : s2.split("\n")) {
				if (stringfinder.startsWith("+")) {
					haveMore = true;
					Matcher matcher = pattern.matcher(stringfinder);
					matcher.find();
					if (!(matcher.group(2).length() <= 3)) {
						changesadd.add(matcher.group(2));
					}
				} else if (stringfinder.startsWith("-")) {
					haveMenus = true;
					Matcher matcher = pattern.matcher(stringfinder);
					matcher.find();
					if (!(matcher.group(2).length() <= 3)) {
						changesRemoved.add(matcher.group(2));
					}
				}
			}

			for (Iterator<String> iterator = changesadd.iterator(); iterator
					.hasNext();) {
				String value = iterator.next();
				if (value.replace("\t", "").replace(" ", "").length() <= 3) {
					iterator.remove();
				}
			}

			for (Iterator<String> iterator = changesRemoved.iterator(); iterator
					.hasNext();) {
				String value = iterator.next();
				if (value.replace("\t", "").replace(" ", "").length() <= 3) {
					iterator.remove();
				}
			}
			if (haveMore == true) {
				String[] setFileToAddvedAnalysis = Utils.execueCommand(
						"git show " + commit + ":" + file).split("\n");
				for (String auxiliar : changesadd) {
					for (int inter = menor-1; inter <= maior+1;inter++) {
						if (setFileToAddvedAnalysis[inter].equals((auxiliar))) {
							changesaddLine.add(String.valueOf(inter + 1));
						}
					}

				}
			}
			if (haveMenus == true) {
				String[] setFileToRemovedAnalysis = Utils.execueCommand(
						"git show " + commit + "^:" + file).split("\n");
				for (String auxiliar : changesRemoved) {
					for (int inter = menor-1; inter <= maior+1; inter++) {
						if (setFileToRemovedAnalysis[inter].equals((auxiliar))) {
							changesRemovedLine.add(String.valueOf(inter + 1));
						}
					}

				}
			}
		}
		temp.add(changesaddLine);
		temp.add(changesRemovedLine);

		return temp;

	}

//	public static void main(String[] args) {
//
//		ArrayList<Set<String>> temp = Utils.getSetLineNumer(
//				"376bd9cb357ec945ac893feaeb63af7370a6e70",
//				"security/selinux/ss/services.c");
//
//		System.out.println(temp.get(1).size());
//		for (String s : temp.get(1)) {
//			System.out.println(s);
//		}
//	}

}